{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api.tatum.io"
    }
  ],
  "info": {
    "version": "1.1.2",
    "title": "BLOCKCHAIN DATA"
  },
  "tags": [
    {
      "name": "Token API"
    },
    {
      "name": "NFT API"
    },
    {
      "name": "Wallet API"
    },
    {
      "name": "Transactions API"
    },
    {
      "name": "DeFi API"
    }
  ],
  "paths": {
    "/v4/data/collections": {
      "get": {
        "description": "<p><b>10 credits per API call</b></p>\n<p>Get all NFTs (ERC-721 and ERC-1155) and multitokens (ERC-1155 only) of your favorite collections! Our API lets you search for all tokens on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon / polygon-amoy</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n<li>Tezos - tezos-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and comma-separated list of collection addresses. Our API will return relevant information about each token, including its name, description, image, and more.</li>\n<li>Aside from relevant information about each token, the response also contains metadata (they can, however, be excluded by setting <code>excludeMetadata</code> to <code>true</code>).</li>\n<li>If not specified, the API returns results for all supported types of tokens (nft, multitokens), but you can also choose to filter only one <code>tokenType</code>.</li>\n<li>For Tezos blockchain query parameters <code>excludeMetadata</code> and <code>tokenType</code> won't have any effect on filtering data.</li>\n</ul>\n",
        "operationId": "GetCollectionsV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain addresses of the collections.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "collectionAddresses",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The option to select only specific token types.\nIt is possible to enter list of multiple types as a comma separated string.\nUse nft (includes ERC-721 and ERC-1155) or multitoken (ERC-1155 only).\n",
            "in": "query",
            "name": "tokenTypes",
            "schema": {
              "type": "string",
              "example": "nft",
              "enum": [
                "nft",
                "multitoken"
              ]
            }
          },
          {
            "description": "The option to exclude metadata from the response.",
            "in": "query",
            "name": "excludeMetadata",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "description": "Name of the chain.",
                            "example": "ethereum"
                          },
                          "tokenId": {
                            "type": "string",
                            "description": "ID of the token.",
                            "maxLength": 78,
                            "example": "3",
                            "format": "uint256"
                          },
                          "tokenAddress": {
                            "type": "string",
                            "description": "Contract address of the token.",
                            "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
                          },
                          "tokenType": {
                            "type": "string",
                            "enum": [
                              "native",
                              "fungible",
                              "nft",
                              "multitoken"
                            ],
                            "description": "Enum representing the type of token.",
                            "example": "nft"
                          },
                          "metadataURI": {
                            "type": "string",
                            "description": "Metadata URL of the token. This data doesn't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                            "example": "ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3"
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Metadata scheme obtained from the url. This data don't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                            "example": {
                              "image": "ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX",
                              "attributes": [
                                {
                                  "trait_type": "Background",
                                  "value": "Club Exterior"
                                },
                                {
                                  "trait_type": "Fur",
                                  "value": "Radioactive"
                                },
                                {
                                  "trait_type": "Back",
                                  "value": "Beer Kegs"
                                },
                                {
                                  "trait_type": "Mouth",
                                  "value": "Goofball"
                                },
                                {
                                  "trait_type": "Eyes",
                                  "value": "Closed"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "description": "Name of the chain.",
                            "example": "ethereum"
                          },
                          "tokenId": {
                            "type": "string",
                            "description": "ID of the token.",
                            "maxLength": 78,
                            "example": "3",
                            "format": "uint256"
                          },
                          "tokenAddress": {
                            "type": "string",
                            "description": "Contract address of the token.",
                            "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
                          },
                          "tokenType": {
                            "type": "string",
                            "enum": [
                              "native",
                              "fungible",
                              "nft",
                              "multitoken"
                            ],
                            "description": "Enum representing the type of token.",
                            "example": "nft"
                          },
                          "creator": {
                            "type": "string",
                            "description": "Address of the token creator.",
                            "example": "tz1hkNPg5jQ66pJpZH2boiF5AnbAcd1dt5KS"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the token.",
                            "example": "My token 1"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get tokens from a collection",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v3/data/collections": {
      "get": {
        "deprecated": true,
        "description": "<p><b>10 credits per API call</b></p>\n<p>Get all NFTs (ERC-721 and ERC-1155) and multitokens (ERC-1155 only) of your favorite collections! Our API lets you search for all tokens on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon / polygon-amoy</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n<li>Tezos - tezos-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and comma-separated list of collection addresses. Our API will return relevant information about each token, including its name, description, image, and more.</li>\n<li>Aside from relevant information about each token, the response also contains metadata (they can, however, be excluded by setting <code>excludeMetadata</code> to <code>true</code>).</li>\n<li>If not specified, the API returns results for all supported types of tokens (nft, multitokens), but you can also choose to filter only one <code>tokenType</code>.</li>\n<li>For Tezos blockchain query parameters <code>excludeMetadata</code> and <code>tokenType</code> won't have any effect on filtering data.</li>\n</ul>\n",
        "operationId": "GetCollections",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain addresses of the collections.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "collectionAddresses",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The option to select only specific token types.\nIt is possible to enter list of multiple types as a comma separated string.\nUse nft (includes ERC-721 and ERC-1155) or multitoken (ERC-1155 only).\n",
            "in": "query",
            "name": "tokenTypes",
            "schema": {
              "type": "string",
              "example": "nft",
              "enum": [
                "nft",
                "multitoken"
              ]
            }
          },
          {
            "description": "The option to exclude metadata from the response.",
            "in": "query",
            "name": "excludeMetadata",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "description": "Name of the chain.",
                            "example": "ethereum"
                          },
                          "tokenId": {
                            "type": "string",
                            "description": "ID of the token.",
                            "maxLength": 78,
                            "example": "3",
                            "format": "uint256"
                          },
                          "tokenAddress": {
                            "type": "string",
                            "description": "Contract address of the token.",
                            "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
                          },
                          "tokenType": {
                            "type": "string",
                            "enum": [
                              "native",
                              "fungible",
                              "nft",
                              "multitoken"
                            ],
                            "description": "Enum representing the type of token.",
                            "example": "nft"
                          },
                          "metadataURI": {
                            "type": "string",
                            "description": "Metadata URL of the token. This data doesn't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                            "example": "ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3"
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Metadata scheme obtained from the url. This data don't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                            "example": {
                              "image": "ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX",
                              "attributes": [
                                {
                                  "trait_type": "Background",
                                  "value": "Club Exterior"
                                },
                                {
                                  "trait_type": "Fur",
                                  "value": "Radioactive"
                                },
                                {
                                  "trait_type": "Back",
                                  "value": "Beer Kegs"
                                },
                                {
                                  "trait_type": "Mouth",
                                  "value": "Goofball"
                                },
                                {
                                  "trait_type": "Eyes",
                                  "value": "Closed"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "description": "Name of the chain.",
                            "example": "ethereum"
                          },
                          "tokenId": {
                            "type": "string",
                            "description": "ID of the token.",
                            "maxLength": 78,
                            "example": "3",
                            "format": "uint256"
                          },
                          "tokenAddress": {
                            "type": "string",
                            "description": "Contract address of the token.",
                            "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
                          },
                          "tokenType": {
                            "type": "string",
                            "enum": [
                              "native",
                              "fungible",
                              "nft",
                              "multitoken"
                            ],
                            "description": "Enum representing the type of token.",
                            "example": "nft"
                          },
                          "creator": {
                            "type": "string",
                            "description": "Address of the token creator.",
                            "example": "tz1hkNPg5jQ66pJpZH2boiF5AnbAcd1dt5KS"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the token.",
                            "example": "My token 1"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get tokens from a collection",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v4/data/metadata": {
      "get": {
        "description": "<p><b>5 credits per API call</b></p>\n<p>Get metadata of NFTs (ERC-721 and ERC-1155) or multitokens (ERC-1155 only) by IDs for a given token address! Our API lets you search for all tokens on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name, token address and comma-separated list of IDs. Our API will return relevant metadata about each specified token, including its name, description, image, and more.</li>\n<li>Aside from the metadata information, the response also contains token types and metadata url minted in each token.</li>\n</ul>\n",
        "operationId": "GetMetadataV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the NFT to get metadata for.",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The IDs of the tokens to get metadata for.\nIt is possible to enter list of multiple IDs as a comma separated string.\n",
            "in": "query",
            "name": "tokenIds",
            "required": true,
            "schema": {
              "type": "string",
              "description": "IDs of the token.",
              "maxLength": 78,
              "example": "3,4",
              "format": "uint256"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain": {
                        "type": "string",
                        "description": "Name of the chain.",
                        "example": "ethereum"
                      },
                      "tokenId": {
                        "type": "string",
                        "description": "ID of the token.",
                        "maxLength": 78,
                        "example": "3",
                        "format": "uint256"
                      },
                      "tokenAddress": {
                        "type": "string",
                        "description": "Contract address of the token.",
                        "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
                      },
                      "tokenType": {
                        "type": "string",
                        "enum": [
                          "native",
                          "fungible",
                          "nft",
                          "multitoken"
                        ],
                        "description": "Enum representing the type of token.",
                        "example": "nft"
                      },
                      "metadataURI": {
                        "type": "string",
                        "description": "Metadata URL of the token. This data doesn't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                        "example": "ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Metadata scheme obtained from the url. This data don't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                        "example": {
                          "image": "ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX",
                          "attributes": [
                            {
                              "trait_type": "Background",
                              "value": "Club Exterior"
                            },
                            {
                              "trait_type": "Fur",
                              "value": "Radioactive"
                            },
                            {
                              "trait_type": "Back",
                              "value": "Beer Kegs"
                            },
                            {
                              "trait_type": "Mouth",
                              "value": "Goofball"
                            },
                            {
                              "trait_type": "Eyes",
                              "value": "Closed"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get token metadata",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v3/data/metadata": {
      "get": {
        "deprecated": true,
        "description": "<p><b>5 credits per API call</b></p>\n<p>Get metadata of NFTs (ERC-721 and ERC-1155) or multitokens (ERC-1155 only) by IDs for a given token address! Our API lets you search for all tokens on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name, token address and comma-separated list of IDs. Our API will return relevant metadata about each specified token, including its name, description, image, and more.</li>\n<li>Aside from the metadata information, the response also contains token types and metadata url minted in each token.</li>\n</ul>\n",
        "operationId": "GetMetadata",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the NFT to get metadata for.",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The IDs of the tokens to get metadata for.\nIt is possible to enter list of multiple IDs as a comma separated string.\n",
            "in": "query",
            "name": "tokenIds",
            "required": true,
            "schema": {
              "type": "string",
              "description": "IDs of the token.",
              "maxLength": 78,
              "example": "3,4",
              "format": "uint256"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain": {
                        "type": "string",
                        "description": "Name of the chain.",
                        "example": "ethereum"
                      },
                      "tokenId": {
                        "type": "string",
                        "description": "ID of the token.",
                        "maxLength": 78,
                        "example": "3",
                        "format": "uint256"
                      },
                      "tokenAddress": {
                        "type": "string",
                        "description": "Contract address of the token.",
                        "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
                      },
                      "tokenType": {
                        "type": "string",
                        "enum": [
                          "native",
                          "fungible",
                          "nft",
                          "multitoken"
                        ],
                        "description": "Enum representing the type of token.",
                        "example": "nft"
                      },
                      "metadataURI": {
                        "type": "string",
                        "description": "Metadata URL of the token. This data doesn't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                        "example": "ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Metadata scheme obtained from the url. This data don't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
                        "example": {
                          "image": "ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX",
                          "attributes": [
                            {
                              "trait_type": "Background",
                              "value": "Club Exterior"
                            },
                            {
                              "trait_type": "Fur",
                              "value": "Radioactive"
                            },
                            {
                              "trait_type": "Back",
                              "value": "Beer Kegs"
                            },
                            {
                              "trait_type": "Mouth",
                              "value": "Goofball"
                            },
                            {
                              "trait_type": "Eyes",
                              "value": "Closed"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get token metadata",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v4/data/balances": {
      "get": {
        "description": "<p><b>50 credits per API call</b></p>\n<p>Get balances of fungible tokens (ERC-20), NFTs (ERC-721 and ERC-1155) or multitokens (ERC-1155 only) for a specific wallet address on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Tezos - tezos-mainnet</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and comma-separated list of addresses. Our API will return balances of each token along with further information such as its type, id, and more.</li>\n<li>Aside from relevant information about each token and its balance, the response also contains metadata (they can, however, be excluded by setting <code>excludeMetadata</code> to <code>true</code>).</li>\n<li>If not specified, the API returns balances for all supported types of tokens (fungible tokens, nft, multitokens), but you can also choose to filter specific <code>tokenTypes</code>.</li>\n<li>For Tezos blockchain, the API returns balance of any tokens including native token (XTZ) for specified wallet addresses. Following query parameters won't have any effect on filtering data <code>excludeMetadata</code>.</li>\n</ul>\n",
        "operationId": "GetBalancesV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "tezos",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain public wallet addresses.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "addresses",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Wallet address",
              "example": "0x80d8bac9a6901698b3749fe336bbd1385c1f98f2,0xAe680Ed83baF08a8028118Bd19859F8a0E744cc6"
            }
          },
          {
            "description": "The option to select only specific token types.\nIt is possible to enter list of multiple types as a comma separated string.\nUse fungible (ERC-20), nft (includes ERC-721 and ERC-1155) or multitoken (ERC-1155 only).\n",
            "in": "query",
            "name": "tokenTypes",
            "schema": {
              "type": "string",
              "example": "nft,multitoken",
              "enum": [
                "nft",
                "multitoken",
                "fungible"
              ]
            }
          },
          {
            "description": "The option to exclude metadata from the response.",
            "in": "query",
            "name": "excludeMetadata",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "chain": {
                                "type": "string",
                                "description": "Name of the chain.",
                                "example": "ethereum"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "native",
                                  "fungible",
                                  "nft",
                                  "multitoken"
                                ],
                                "description": "Enum representing the type of token.",
                                "example": "nft"
                              },
                              "address": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "chain",
                              "type",
                              "address",
                              "balance"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "chain": {
                                "type": "string",
                                "description": "Name of the chain.",
                                "example": "ethereum"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "native",
                                  "fungible",
                                  "nft",
                                  "multitoken"
                                ],
                                "description": "Enum representing the type of token.",
                                "example": "nft"
                              },
                              "address": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "string"
                              },
                              "tokenAddress": {
                                "type": "string"
                              },
                              "tokenId": {
                                "type": "string"
                              },
                              "metadataURI": {
                                "type": "string"
                              },
                              "lastUpdatedBlockNumber": {
                                "type": "integer"
                              },
                              "metadata": {
                                "type": "object"
                              }
                            },
                            "required": [
                              "chain",
                              "type",
                              "address",
                              "balance",
                              "tokenAddress",
                              "lastUpdatedBlockNumber"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "chain": {
                                "type": "string",
                                "description": "Name of the chain.",
                                "example": "ethereum"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "native",
                                  "fungible",
                                  "nft",
                                  "multitoken"
                                ],
                                "description": "Enum representing the type of token.",
                                "example": "nft"
                              },
                              "address": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "string"
                              },
                              "tokenAddress": {
                                "type": "string"
                              },
                              "lastUpdatedBlockNumber": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "chain",
                              "type",
                              "address",
                              "balance",
                              "tokenAddress",
                              "lastUpdatedBlockNumber"
                            ]
                          }
                        ]
                      },
                      "description": "List of all balances for all selected tokens.",
                      "example": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xae680ed83baf08a8028118bd19859f8a0e744cc6",
                          "balance": "283333333333333333333",
                          "tokenAddress": "0x45dd18c5e0fa701abff449f6542aa53e258710b4",
                          "lastUpdatedBlockNumber": 14792747,
                          "type": "fungible"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xae680ed83baf08a8028118bd19859f8a0e744cc6",
                          "balance": "8690000000000000000",
                          "tokenAddress": "0x090f21a84a0e9674c1828aca1db69ec8ae1454e8",
                          "lastUpdatedBlockNumber": 15204015,
                          "type": "fungible"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xae680ed83baf08a8028118bd19859f8a0e744cc6",
                          "balance": "1",
                          "tokenAddress": "0xa58b5224e2fd94020cb2837231b2b0e4247301a6",
                          "lastUpdatedBlockNumber": 15326272,
                          "type": "multitoken",
                          "tokenId": "2605",
                          "metadataURI": "https://www.cryptovoxels.com/c/1/2605",
                          "metadata": {
                            "url": "https://www.cryptovoxels.com/c/1/2605",
                            "name": "Link Marine Helmet",
                            "description": "Chainlink Marine Helmet, give Sergey Nazarov your love."
                          }
                        }
                      ]
                    },
                    "prevPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get previous page of results (work in progress, not used right now).",
                      "example": ""
                    },
                    "nextPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get next page of results (work in progress, not used right now).",
                      "example": ""
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get balances of addresses",
        "tags": [
          "Wallet API"
        ]
      }
    },
    "/v3/data/balances": {
      "get": {
        "deprecated": true,
        "description": "<p><b>50 credits per API call</b></p>\n<p>Get balances of fungible tokens (ERC-20), NFTs (ERC-721 and ERC-1155) or multitokens (ERC-1155 only) for a specific wallet address on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Tezos - tezos-mainnet</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and comma-separated list of addresses. Our API will return balances of each token along with further information such as its type, id, and more.</li>\n<li>Aside from relevant information about each token and its balance, the response also contains metadata (they can, however, be excluded by setting <code>excludeMetadata</code> to <code>true</code>).</li>\n<li>If not specified, the API returns balances for all supported types of tokens (fungible tokens, nft, multitokens), but you can also choose to filter specific <code>tokenTypes</code>.</li>\n<li>For Tezos blockchain, the API returns balance of any tokens including native token (XTZ) for specified wallet addresses. Following query parameters won't have any effect on filtering data <code>excludeMetadata</code>.</li>\n</ul>\n",
        "operationId": "GetBalances",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "tezos",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain public wallet addresses.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "addresses",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Wallet address",
              "example": "0x80d8bac9a6901698b3749fe336bbd1385c1f98f2,0xAe680Ed83baF08a8028118Bd19859F8a0E744cc6"
            }
          },
          {
            "description": "The option to select only specific token types.\nIt is possible to enter list of multiple types as a comma separated string.\nUse fungible (ERC-20), nft (includes ERC-721 and ERC-1155) or multitoken (ERC-1155 only).\n",
            "in": "query",
            "name": "tokenTypes",
            "schema": {
              "type": "string",
              "example": "nft,multitoken",
              "enum": [
                "nft",
                "multitoken",
                "fungible"
              ]
            }
          },
          {
            "description": "The option to exclude metadata from the response.",
            "in": "query",
            "name": "excludeMetadata",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "chain": {
                                "type": "string",
                                "description": "Name of the chain.",
                                "example": "ethereum"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "native",
                                  "fungible",
                                  "nft",
                                  "multitoken"
                                ],
                                "description": "Enum representing the type of token.",
                                "example": "nft"
                              },
                              "address": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "chain",
                              "type",
                              "address",
                              "balance"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "chain": {
                                "type": "string",
                                "description": "Name of the chain.",
                                "example": "ethereum"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "native",
                                  "fungible",
                                  "nft",
                                  "multitoken"
                                ],
                                "description": "Enum representing the type of token.",
                                "example": "nft"
                              },
                              "address": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "string"
                              },
                              "tokenAddress": {
                                "type": "string"
                              },
                              "tokenId": {
                                "type": "string"
                              },
                              "metadataURI": {
                                "type": "string"
                              },
                              "lastUpdatedBlockNumber": {
                                "type": "integer"
                              },
                              "metadata": {
                                "type": "object"
                              }
                            },
                            "required": [
                              "chain",
                              "type",
                              "address",
                              "balance",
                              "tokenAddress",
                              "lastUpdatedBlockNumber"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "chain": {
                                "type": "string",
                                "description": "Name of the chain.",
                                "example": "ethereum"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "native",
                                  "fungible",
                                  "nft",
                                  "multitoken"
                                ],
                                "description": "Enum representing the type of token.",
                                "example": "nft"
                              },
                              "address": {
                                "type": "string"
                              },
                              "balance": {
                                "type": "string"
                              },
                              "tokenAddress": {
                                "type": "string"
                              },
                              "lastUpdatedBlockNumber": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "chain",
                              "type",
                              "address",
                              "balance",
                              "tokenAddress",
                              "lastUpdatedBlockNumber"
                            ]
                          }
                        ]
                      },
                      "description": "List of all balances for all selected tokens.",
                      "example": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xae680ed83baf08a8028118bd19859f8a0e744cc6",
                          "balance": "283333333333333333333",
                          "tokenAddress": "0x45dd18c5e0fa701abff449f6542aa53e258710b4",
                          "lastUpdatedBlockNumber": 14792747,
                          "type": "fungible"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xae680ed83baf08a8028118bd19859f8a0e744cc6",
                          "balance": "8690000000000000000",
                          "tokenAddress": "0x090f21a84a0e9674c1828aca1db69ec8ae1454e8",
                          "lastUpdatedBlockNumber": 15204015,
                          "type": "fungible"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xae680ed83baf08a8028118bd19859f8a0e744cc6",
                          "balance": "1",
                          "tokenAddress": "0xa58b5224e2fd94020cb2837231b2b0e4247301a6",
                          "lastUpdatedBlockNumber": 15326272,
                          "type": "multitoken",
                          "tokenId": "2605",
                          "metadataURI": "https://www.cryptovoxels.com/c/1/2605",
                          "metadata": {
                            "url": "https://www.cryptovoxels.com/c/1/2605",
                            "name": "Link Marine Helmet",
                            "description": "Chainlink Marine Helmet, give Sergey Nazarov your love."
                          }
                        }
                      ]
                    },
                    "prevPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get previous page of results (work in progress, not used right now).",
                      "example": ""
                    },
                    "nextPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get next page of results (work in progress, not used right now).",
                      "example": ""
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get balances of addresses",
        "tags": [
          "Wallet API"
        ]
      }
    },
    "/v4/data/owners": {
      "get": {
        "description": "<p><b>20 credits per API call</b></p>\n<p>Get all addresses that own your favorite token (ERC-20, ERC-721 or ERC-1155)! Our API lets you search for all token owners on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and address of any fungible token, NFT or multitoken collection. Our API will return a list of addresses of all of their owners.</li>\n<li>You can also get an owner of a specific NFT by specifying <code>tokenId</code>. In case of multitoken, result is an array of addresses.</li>\n</ul>\n",
        "operationId": "GetOwnersV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the token (NFT collection or any fungible token).",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The ID of a specific NFT token.",
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of all addresses that own a token in a specified collection.",
                  "example": [
                    "0x0bbf9f25c863fdf19e645c96280004d24f43cb38",
                    "0x0bd1b3b12db943f2310a4e53481ae97f8b6c2a75",
                    "0x281f4727081ab4a066f321fd6fc8dd0dc063e9fd",
                    "0x681cbae1c41e5eec8411dd8e009fa71f81d03f7f",
                    "0x7b49a05c15702bbe1db534058ebcc9e950c474ca"
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get owners of a token",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v3/data/owners": {
      "get": {
        "deprecated": true,
        "description": "<p><b>20 credits per API call</b></p>\n<p>Get all addresses that own your favorite token (ERC-20, ERC-721 or ERC-1155)! Our API lets you search for all token owners on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and address of any fungible token, NFT or multitoken collection. Our API will return a list of addresses of all of their owners.</li>\n<li>You can also get an owner of a specific NFT by specifying <code>tokenId</code>. In case of multitoken, result is an array of addresses.</li>\n</ul>\n",
        "operationId": "GetOwners",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the token (NFT collection or any fungible token).",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The ID of a specific NFT token.",
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of all addresses that own a token in a specified collection.",
                  "example": [
                    "0x0bbf9f25c863fdf19e645c96280004d24f43cb38",
                    "0x0bd1b3b12db943f2310a4e53481ae97f8b6c2a75",
                    "0x281f4727081ab4a066f321fd6fc8dd0dc063e9fd",
                    "0x681cbae1c41e5eec8411dd8e009fa71f81d03f7f",
                    "0x7b49a05c15702bbe1db534058ebcc9e950c474ca"
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get owners of a token",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v4/data/owners/address": {
      "get": {
        "description": "<p><b>1 credit per API call</b></p>\n<p>Check if wallet address owns any specified token (ERC-20, ERC-721 or ERC-1155) on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name, wallet address and address of any fungible token, NFT or multitoken collection. Our API will return <code>true</code> if provided wallet address owns them.</li>\n<li>If wallet address does not own the specific token, response body is <code>false</code> and status code is <code>200</code>.</li>\n<li>It is also possible to check if wallet address owns a specific NFT by specifying a <code>tokenId</code>.</li>\n</ul>\n",
        "operationId": "CheckOwnerV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the wallet.",
            "in": "query",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x2474a7227877f2b65185f09468af7c6577fa207c"
            }
          },
          {
            "description": "The blockchain address of the token (NFT collection or any fungible token).",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The ID of a specific NFT token.",
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Check owner of token",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v3/data/owners/address": {
      "get": {
        "deprecated": true,
        "description": "<p><b>1 credit per API call</b></p>\n<p>Check if wallet address owns any specified token (ERC-20, ERC-721 or ERC-1155) on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name, wallet address and address of any fungible token, NFT or multitoken collection. Our API will return <code>true</code> if provided wallet address owns them.</li>\n<li>If wallet address does not own the specific token, response body is <code>false</code> and status code is <code>200</code>.</li>\n<li>It is also possible to check if wallet address owns a specific NFT by specifying a <code>tokenId</code>.</li>\n</ul>\n",
        "operationId": "CheckOwner",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the wallet.",
            "in": "query",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x2474a7227877f2b65185f09468af7c6577fa207c"
            }
          },
          {
            "description": "The blockchain address of the token (NFT collection or any fungible token).",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The ID of a specific NFT token.",
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Check owner of token",
        "tags": [
          "NFT API"
        ]
      }
    },
    "/v4/data/transactions": {
      "get": {
        "description": "<p><b>20 credits per API call</b></p>\n<p>Get transactions on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Tezos - tezos-mainnet</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and comma-separated list of addresses. Our API will return all of their transactions along with further information such as their block number, ID of involved token, and more.</li>\n<li>If not specified, the API returns transactions of various types (fungible, nft, multitoken, native), but you can also choose to filter specific <code>transactionTypes</code> and even <code>transactionSubtype</code> (incoming, outgoing, zero-transfer).</li>\n<li>On top of that, you can add further filters such as specifying block range where the transactions should have occurred, or address and ID of involved tokens.</li>\n<li>For Tezos blockchain, the API accepts only one wallet address in <code>addresses</code> query parameter. Following query parameters won't have any effect on filtering data: <code>transactionTypes</code>, <code>transactionSubtype</code>, <code>tokenId</code>, <code>blockTo</code>.</li>\n<li>When querying Tezos transactions for a specified wallet or contract address, pagination is supported via <code>pageSize</code> and <code>offset</code> query parameters. \n<li>When querying Tezos transactions for a specified block, pagination is supported via <code>cursor</code> query parameter, by filling in the value from <code>prevPage</code> or <code>nextPage</code> field in the response body.</li>\n<li><b>When you are filtering data using blockFrom and not using blockTo, blockTo is automatically added as blockFrom + 1000. The same applies when blockTo is present and blockFrom is not. In that case blockFrom is automatically added as blockTo - 1000.</b></li>\n</ul>\n",
        "operationId": "GetTransactionsV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "tezos",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain public wallet addresses.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "addresses",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0x2474a7227877f2b65185f09468af7c6577fa207c"
            }
          },
          {
            "description": "The option to filter transaction based on types.\nIt is possible to enter list of multiple types as a comma separated string.\nUse fungible (ERC-20), nft (ERC-721 and ERC-1155), multitoken (ERC-1155) or native.\n",
            "in": "query",
            "name": "transactionTypes",
            "schema": {
              "type": "string",
              "example": "fungible,nft",
              "enum": [
                "fungible",
                "nft",
                "multitoken",
                "native"
              ]
            }
          },
          {
            "description": "The option to filter transaction based on subtype.",
            "in": "query",
            "name": "transactionSubtype",
            "schema": {
              "type": "string",
              "example": "incoming",
              "enum": [
                "incoming",
                "outgoing",
                "zero-transfer"
              ]
            }
          },
          {
            "description": "Address of a token (smart contract).",
            "in": "query",
            "name": "tokenAddress",
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "ID of a token.",
            "in": "query",
            "name": "tokenId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          },
          {
            "description": "Transactions from this block onwards will be included. If blockTo is not specified, it is automatically calculated as blockFrom + 1000.",
            "in": "query",
            "name": "blockFrom",
            "required": false,
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Transactions up to this block will be included. If blockFrom is not specified, it is automatically calculated as blockTo - 1000.",
            "in": "query",
            "name": "blockTo",
            "required": false,
            "schema": {
              "type": "number",
              "example": 16779230,
              "minimum": 0
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          },
          {
            "description": "The cursor to obtain previous page or next page of the data. Available only for Tezos blockchain.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string",
              "description": "Cursor pagination, used to get next page or previous page of results. The size of result is defined by the `pageSize` parameter. \nThe cursor is a base64 encoded string, user can get the value from a response in the `nextPage` or `prevPage` field. \nIf the nextPage or prevPage fields are not present in the response body, pagination is usually available with the `offset` and `pageSize` parameters. \n",
              "example": "MzYxNTQ3MHwyNDV8cHJldg=="
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "description": "List of all selected transactions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "example": "ethereum",
                            "enum": [
                              "ethereum",
                              "ethereum-sepolia",
                              "ethereum-holesky",
                              "celo",
                              "celo-testnet",
                              "bsc",
                              "bsc-testnet",
                              "polygon",
                              "eon",
                              "chiliz"
                            ]
                          },
                          "hash": {
                            "type": "string",
                            "description": "The transaction hash.",
                            "example": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3"
                          },
                          "address": {
                            "type": "string",
                            "description": "The address involved in the transaction.",
                            "example": "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
                          },
                          "counterAddress": {
                            "type": "string",
                            "description": "The counter address involved in the transaction (optional).",
                            "example": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
                          },
                          "tokenAddress": {
                            "type": "string",
                            "description": "The token address involved in the transaction (optional).",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "tokenId": {
                            "type": "string",
                            "description": "The ID of the token involved in the transaction (optional).",
                            "example": 33
                          },
                          "blockNumber": {
                            "type": "number",
                            "description": "The block number in which the transaction occurred.",
                            "example": 16819465
                          },
                          "transactionIndex": {
                            "type": "number",
                            "description": "The transaction index within the block.",
                            "example": 84
                          },
                          "transactionType": {
                            "type": "string",
                            "description": "The type of the transaction.",
                            "enum": [
                              "fungible",
                              "nft",
                              "multitoken",
                              "native"
                            ]
                          },
                          "transactionSubtype": {
                            "type": "string",
                            "description": "The subtype of the transaction.",
                            "enum": [
                              "incoming",
                              "outgoing",
                              "zero-transfer"
                            ]
                          },
                          "amount": {
                            "type": "string",
                            "description": "The amount transferred in the transaction.",
                            "example": 0.9909237063720822
                          },
                          "timestamp": {
                            "type": "number",
                            "description": "The timestamp when the transaction occurred.",
                            "example": 1678715303000
                          }
                        }
                      },
                      "example": [
                        {
                          "chain": "ethereum-mainnet",
                          "hash": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3",
                          "address": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                          "blockNumber": 16819465,
                          "transactionIndex": 84,
                          "transactionType": "fungible",
                          "transactionSubtype": "incoming",
                          "amount": "0.990923706372082143",
                          "timestamp": 1678715303000,
                          "tokenAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                          "counterAddress": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "hash": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3",
                          "address": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                          "blockNumber": 16819465,
                          "transactionIndex": 84,
                          "transactionType": "native",
                          "transactionSubtype": "zero-transfer",
                          "amount": "0",
                          "timestamp": 1678715303000,
                          "counterAddress": "0xd841e3d110cbe4aedb04c9dcc3572ec306bda2f9"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "hash": "0x4e0268c1e67575fd09047e006dd5ad26df402d85fa159e10639e9ea7c2d428f7",
                          "address": "0x0000000000000000000000000000000000000000",
                          "blockNumber": 16819465,
                          "transactionIndex": 119,
                          "transactionType": "nft",
                          "transactionSubtype": "outgoing",
                          "amount": "-1",
                          "timestamp": 1678715303000,
                          "tokenId": "33",
                          "tokenAddress": "0x3bcad8a734e923133d2c8c3fd4747d47e12d4f79",
                          "counterAddress": "0x84300dcc7ca9cf447e886fa17c11fa22557d1af0"
                        }
                      ]
                    },
                    "prevPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get previous page of results (only relevant for Tezos).",
                      "example": "KtYxNTQ3MHwyNDV8cHJldgs="
                    },
                    "nextPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get next page of results (only relevant for Tezos).",
                      "example": "MzYxNTQ3MHwyNDV8cHJldg=="
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get transactions",
        "tags": [
          "Transactions API"
        ]
      }
    },
    "/v3/data/transactions": {
      "get": {
        "deprecated": true,
        "description": "<p><b>20 credits per API call</b></p>\n<p>Get transactions on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Tezos - tezos-mainnet</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and comma-separated list of addresses. Our API will return all of their transactions along with further information such as their block number, ID of involved token, and more.</li>\n<li>If not specified, the API returns transactions of various types (fungible, nft, multitoken, native), but you can also choose to filter specific <code>transactionTypes</code> and even <code>transactionSubtype</code> (incoming, outgoing, zero-transfer).</li>\n<li>On top of that, you can add further filters such as specifying block range where the transactions should have occurred, or address and ID of involved tokens.</li>\n<li>For Tezos blockchain, the API accepts only one wallet address in <code>addresses</code> query parameter. Following query parameters won't have any effect on filtering data: <code>transactionTypes</code>, <code>transactionSubtype</code>, <code>tokenId</code>, <code>blockTo</code>.</li>\n<li>When querying Tezos transactions for a specified wallet or contract address, pagination is supported via <code>pageSize</code> and <code>offset</code> query parameters. \n<li>When querying Tezos transactions for a specified block, pagination is supported via <code>cursor</code> query parameter, by filling in the value from <code>prevPage</code> or <code>nextPage</code> field in the response body.</li>\n<li><b>When you are filtering data using blockFrom and not using blockTo, blockTo is automatically added as blockFrom + 1000. The same applies when blockTo is present and blockFrom is not. In that case blockFrom is automatically added as blockTo - 1000.</b></li>\n</ul>\n",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "tezos",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain public wallet addresses.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "addresses",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0x2474a7227877f2b65185f09468af7c6577fa207c"
            }
          },
          {
            "description": "The option to filter transaction based on types.\nIt is possible to enter list of multiple types as a comma separated string.\nUse fungible (ERC-20), nft (ERC-721 and ERC-1155), multitoken (ERC-1155) or native.\n",
            "in": "query",
            "name": "transactionTypes",
            "schema": {
              "type": "string",
              "example": "fungible,nft",
              "enum": [
                "fungible",
                "nft",
                "multitoken",
                "native"
              ]
            }
          },
          {
            "description": "The option to filter transaction based on subtype.",
            "in": "query",
            "name": "transactionSubtype",
            "schema": {
              "type": "string",
              "example": "incoming",
              "enum": [
                "incoming",
                "outgoing",
                "zero-transfer"
              ]
            }
          },
          {
            "description": "Address of a token (smart contract).",
            "in": "query",
            "name": "tokenAddress",
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "ID of a token.",
            "in": "query",
            "name": "tokenId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          },
          {
            "description": "Transactions from this block onwards will be included. If blockTo is not specified, it is automatically calculated as blockFrom + 1000.",
            "in": "query",
            "name": "blockFrom",
            "required": false,
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Transactions up to this block will be included. If blockFrom is not specified, it is automatically calculated as blockTo - 1000.",
            "in": "query",
            "name": "blockTo",
            "required": false,
            "schema": {
              "type": "number",
              "example": 16779230,
              "minimum": 0
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          },
          {
            "description": "The cursor to obtain previous page or next page of the data. Available only for Tezos blockchain.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string",
              "description": "Cursor pagination, used to get next page or previous page of results. The size of result is defined by the `pageSize` parameter. \nThe cursor is a base64 encoded string, user can get the value from a response in the `nextPage` or `prevPage` field. \nIf the nextPage or prevPage fields are not present in the response body, pagination is usually available with the `offset` and `pageSize` parameters. \n",
              "example": "MzYxNTQ3MHwyNDV8cHJldg=="
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "description": "List of all selected transactions.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "chain": {
                            "type": "string",
                            "example": "ethereum",
                            "enum": [
                              "ethereum",
                              "ethereum-sepolia",
                              "ethereum-holesky",
                              "celo",
                              "celo-testnet",
                              "bsc",
                              "bsc-testnet",
                              "polygon",
                              "eon",
                              "chiliz"
                            ]
                          },
                          "hash": {
                            "type": "string",
                            "description": "The transaction hash.",
                            "example": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3"
                          },
                          "address": {
                            "type": "string",
                            "description": "The address involved in the transaction.",
                            "example": "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
                          },
                          "counterAddress": {
                            "type": "string",
                            "description": "The counter address involved in the transaction (optional).",
                            "example": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
                          },
                          "tokenAddress": {
                            "type": "string",
                            "description": "The token address involved in the transaction (optional).",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "tokenId": {
                            "type": "string",
                            "description": "The ID of the token involved in the transaction (optional).",
                            "example": 33
                          },
                          "blockNumber": {
                            "type": "number",
                            "description": "The block number in which the transaction occurred.",
                            "example": 16819465
                          },
                          "transactionIndex": {
                            "type": "number",
                            "description": "The transaction index within the block.",
                            "example": 84
                          },
                          "transactionType": {
                            "type": "string",
                            "description": "The type of the transaction.",
                            "enum": [
                              "fungible",
                              "nft",
                              "multitoken",
                              "native"
                            ]
                          },
                          "transactionSubtype": {
                            "type": "string",
                            "description": "The subtype of the transaction.",
                            "enum": [
                              "incoming",
                              "outgoing",
                              "zero-transfer"
                            ]
                          },
                          "amount": {
                            "type": "string",
                            "description": "The amount transferred in the transaction.",
                            "example": 0.9909237063720822
                          },
                          "timestamp": {
                            "type": "number",
                            "description": "The timestamp when the transaction occurred.",
                            "example": 1678715303000
                          }
                        }
                      },
                      "example": [
                        {
                          "chain": "ethereum-mainnet",
                          "hash": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3",
                          "address": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                          "blockNumber": 16819465,
                          "transactionIndex": 84,
                          "transactionType": "fungible",
                          "transactionSubtype": "incoming",
                          "amount": "0.990923706372082143",
                          "timestamp": 1678715303000,
                          "tokenAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                          "counterAddress": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "hash": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3",
                          "address": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                          "blockNumber": 16819465,
                          "transactionIndex": 84,
                          "transactionType": "native",
                          "transactionSubtype": "zero-transfer",
                          "amount": "0",
                          "timestamp": 1678715303000,
                          "counterAddress": "0xd841e3d110cbe4aedb04c9dcc3572ec306bda2f9"
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "hash": "0x4e0268c1e67575fd09047e006dd5ad26df402d85fa159e10639e9ea7c2d428f7",
                          "address": "0x0000000000000000000000000000000000000000",
                          "blockNumber": 16819465,
                          "transactionIndex": 119,
                          "transactionType": "nft",
                          "transactionSubtype": "outgoing",
                          "amount": "-1",
                          "timestamp": 1678715303000,
                          "tokenId": "33",
                          "tokenAddress": "0x3bcad8a734e923133d2c8c3fd4747d47e12d4f79",
                          "counterAddress": "0x84300dcc7ca9cf447e886fa17c11fa22557d1af0"
                        }
                      ]
                    },
                    "prevPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get previous page of results (only relevant for Tezos).",
                      "example": "KtYxNTQ3MHwyNDV8cHJldgs="
                    },
                    "nextPage": {
                      "type": "string",
                      "description": "Cursor pagination, used to get next page of results (only relevant for Tezos).",
                      "example": "MzYxNTQ3MHwyNDV8cHJldg=="
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get transactions",
        "tags": [
          "Transactions API"
        ]
      }
    },
    "/v4/data/transactions/hash": {
      "get": {
        "description": "<p><b>5 credits per API call</b></p>\n<p>Get transactions by hash on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Tezos - tezos-mainnet</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and transaction hash, and our API will return a list of transactions with that hash.</li>\n<li>The response will contain all the relevant information about specified transactions such as their block number, IDs of involved token, and more.</li>\n</ul>\n",
        "operationId": "GetTransactionsByHashV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "tezos",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "Hash of the transaction.",
            "in": "query",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0xd49f8d6544f2822522886a02f4787a56ea93bbd636bfdf81d6795a10553d7118"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Selected transaction.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain": {
                        "type": "string",
                        "example": "ethereum",
                        "enum": [
                          "ethereum",
                          "ethereum-sepolia",
                          "ethereum-holesky",
                          "celo",
                          "celo-testnet",
                          "bsc",
                          "bsc-testnet",
                          "polygon",
                          "eon",
                          "chiliz"
                        ]
                      },
                      "hash": {
                        "type": "string",
                        "description": "The transaction hash.",
                        "example": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3"
                      },
                      "address": {
                        "type": "string",
                        "description": "The address involved in the transaction.",
                        "example": "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
                      },
                      "counterAddress": {
                        "type": "string",
                        "description": "The counter address involved in the transaction (optional).",
                        "example": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
                      },
                      "tokenAddress": {
                        "type": "string",
                        "description": "The token address involved in the transaction (optional).",
                        "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                      },
                      "tokenId": {
                        "type": "string",
                        "description": "The ID of the token involved in the transaction (optional).",
                        "example": 33
                      },
                      "blockNumber": {
                        "type": "number",
                        "description": "The block number in which the transaction occurred.",
                        "example": 16819465
                      },
                      "transactionIndex": {
                        "type": "number",
                        "description": "The transaction index within the block.",
                        "example": 84
                      },
                      "transactionType": {
                        "type": "string",
                        "description": "The type of the transaction.",
                        "enum": [
                          "fungible",
                          "nft",
                          "multitoken",
                          "native"
                        ]
                      },
                      "transactionSubtype": {
                        "type": "string",
                        "description": "The subtype of the transaction.",
                        "enum": [
                          "incoming",
                          "outgoing",
                          "zero-transfer"
                        ]
                      },
                      "amount": {
                        "type": "string",
                        "description": "The amount transferred in the transaction.",
                        "example": 0.9909237063720822
                      },
                      "timestamp": {
                        "type": "number",
                        "description": "The timestamp when the transaction occurred.",
                        "example": 1678715303000
                      }
                    }
                  },
                  "example": [
                    {
                      "chain": "ethereum-mainnet",
                      "hash": "0xd49f8d6544f2822522886a02f4787a56ea93bbd636bfdf81d6795a10553d7118",
                      "address": "0x9757f2d2b135150bbeb65308d4a91804107cd8d6",
                      "blockNumber": 16410533,
                      "transactionIndex": 139,
                      "transactionType": "native",
                      "transactionSubtype": "incoming",
                      "amount": "0.000000000000000039",
                      "timestamp": 1673765531000,
                      "counterAddress": "0x47405b78a7f381842c4f3d6b2d630dc390f3de9f"
                    },
                    {
                      "chain": "ethereum-mainnet",
                      "hash": "0xd49f8d6544f2822522886a02f4787a56ea93bbd636bfdf81d6795a10553d7118",
                      "address": "0x47405b78a7f381842c4f3d6b2d630dc390f3de9f",
                      "blockNumber": 16410533,
                      "transactionIndex": 139,
                      "transactionType": "native",
                      "transactionSubtype": "outgoing",
                      "amount": "-0.000000000000000039",
                      "timestamp": 1673765531000,
                      "counterAddress": "0x9757f2d2b135150bbeb65308d4a91804107cd8d6"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get transactions by hash",
        "tags": [
          "Transactions API"
        ]
      }
    },
    "/v3/data/transactions/hash": {
      "get": {
        "deprecated": true,
        "description": "<p><b>5 credits per API call</b></p>\n<p>Get transactions by hash on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Tezos - tezos-mainnet</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain name and transaction hash, and our API will return a list of transactions with that hash.</li>\n<li>The response will contain all the relevant information about specified transactions such as their block number, IDs of involved token, and more.</li>\n</ul>\n",
        "operationId": "GetTransactionsByHash",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "tezos",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "Hash of the transaction.",
            "in": "query",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0xd49f8d6544f2822522886a02f4787a56ea93bbd636bfdf81d6795a10553d7118"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Selected transaction.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain": {
                        "type": "string",
                        "example": "ethereum",
                        "enum": [
                          "ethereum",
                          "ethereum-sepolia",
                          "ethereum-holesky",
                          "celo",
                          "celo-testnet",
                          "bsc",
                          "bsc-testnet",
                          "polygon",
                          "eon",
                          "chiliz"
                        ]
                      },
                      "hash": {
                        "type": "string",
                        "description": "The transaction hash.",
                        "example": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3"
                      },
                      "address": {
                        "type": "string",
                        "description": "The address involved in the transaction.",
                        "example": "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
                      },
                      "counterAddress": {
                        "type": "string",
                        "description": "The counter address involved in the transaction (optional).",
                        "example": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
                      },
                      "tokenAddress": {
                        "type": "string",
                        "description": "The token address involved in the transaction (optional).",
                        "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                      },
                      "tokenId": {
                        "type": "string",
                        "description": "The ID of the token involved in the transaction (optional).",
                        "example": 33
                      },
                      "blockNumber": {
                        "type": "number",
                        "description": "The block number in which the transaction occurred.",
                        "example": 16819465
                      },
                      "transactionIndex": {
                        "type": "number",
                        "description": "The transaction index within the block.",
                        "example": 84
                      },
                      "transactionType": {
                        "type": "string",
                        "description": "The type of the transaction.",
                        "enum": [
                          "fungible",
                          "nft",
                          "multitoken",
                          "native"
                        ]
                      },
                      "transactionSubtype": {
                        "type": "string",
                        "description": "The subtype of the transaction.",
                        "enum": [
                          "incoming",
                          "outgoing",
                          "zero-transfer"
                        ]
                      },
                      "amount": {
                        "type": "string",
                        "description": "The amount transferred in the transaction.",
                        "example": 0.9909237063720822
                      },
                      "timestamp": {
                        "type": "number",
                        "description": "The timestamp when the transaction occurred.",
                        "example": 1678715303000
                      }
                    }
                  },
                  "example": [
                    {
                      "chain": "ethereum-mainnet",
                      "hash": "0xd49f8d6544f2822522886a02f4787a56ea93bbd636bfdf81d6795a10553d7118",
                      "address": "0x9757f2d2b135150bbeb65308d4a91804107cd8d6",
                      "blockNumber": 16410533,
                      "transactionIndex": 139,
                      "transactionType": "native",
                      "transactionSubtype": "incoming",
                      "amount": "0.000000000000000039",
                      "timestamp": 1673765531000,
                      "counterAddress": "0x47405b78a7f381842c4f3d6b2d630dc390f3de9f"
                    },
                    {
                      "chain": "ethereum-mainnet",
                      "hash": "0xd49f8d6544f2822522886a02f4787a56ea93bbd636bfdf81d6795a10553d7118",
                      "address": "0x47405b78a7f381842c4f3d6b2d630dc390f3de9f",
                      "blockNumber": 16410533,
                      "transactionIndex": 139,
                      "transactionType": "native",
                      "transactionSubtype": "outgoing",
                      "amount": "-0.000000000000000039",
                      "timestamp": 1673765531000,
                      "counterAddress": "0x9757f2d2b135150bbeb65308d4a91804107cd8d6"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get transactions by hash",
        "tags": [
          "Transactions API"
        ]
      }
    },
    "/v4/data/events": {
      "get": {
        "description": "<p><b>20 credits per API call</b></p>\n<p>Get all events on given addresses and / or in the requested block range on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>To improve response times and obtain specific data, it is recommended to use proper filtering techniques. Please provide a chain name and a combination of filters that will accomplish this (at least block range or contract addresses must be specified).</li>\n<li>It is possible to specify multiple contract addresses at once by passing them as a comma separated string.</li>\n<li>If block range is not specified, the API attempts to go through all available blocks, which may result in a timeout error.</li>\n<li>When you are filtering data using blockFrom and not using blockTo, blockTo is automatically added as blockFrom + 1000. The same applies when blockTo is present and blockFrom is not. In that case blockFrom is automatically added as blockTo - 1000.</li>\n<li>It is recommended to filter only one specific type of events, which comes with built-in decoding for all the supported types.</li>\n<li>It is, however, also possible to filter by signature hashes, which can be passed together as a comma separated string.</li>\n</ul>\n<p>As noted above, aside from general info and hashed event data, the API also decodes them for you in case you filter by one of the following supported event types:</p>\n<ul>\n<li><code>tokenTransfer</code>: All transfers of fungible tokens (including stablecoins) and NFTs as per ERC-20 and ERC-721 standard.</li>\n<li><code>multitokenTransfer</code>: All transfers of multitokens (both single transfers and batch transfers) as per ERC-1155 standard.</li>\n<li><code>stablecoinTransfer</code>: Refers to the transfer of specific stablecoins on the mainnet. Typically, the top 10 to 16 stablecoins on each chain according to CoinMarketCap are included. If the <code>contractAddresses</code> parameter is also used in the filter combination, any tokens specified in it will also be included in the list.</li>\n<li><code>uniswapTrade</code>: Provides all swap events that occur on both Uniswap V2 and V3. In some cases, it may not be possible to map the swapped amounts to specific tokens. As a result, certain decoded data such as token amounts might be missing or in the original big number format. This will be indicated by the response parameter <code>partiallyRaw: true</code>.</li>\n</ul>\n",
        "operationId": "GetEventsV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain addresses of the contracts where requested events were emitted.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "contractAddresses",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce"
            }
          },
          {
            "description": "First block to start from (including this one).",
            "in": "query",
            "name": "blockFrom",
            "required": true,
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Last block to finish on (including this one).",
            "in": "query",
            "name": "blockTo",
            "required": true,
            "schema": {
              "type": "number",
              "example": 16779230,
              "minimum": 0
            }
          },
          {
            "description": "The type of events that should be returned, which comes with decoded data in the response\n(cannot be used together with signatures).\n",
            "in": "query",
            "name": "eventType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tokenTransfer",
              "enum": [
                "tokenTransfer",
                "multitokenTransfer",
                "stablecoinTransfer",
                "uniswapTrade"
              ]
            }
          },
          {
            "description": "The types of events that should be returned, specified by hashed signature\n(cannot be used together with eventType).\nIt is possible to enter list of multiple signatures as a comma separated string.\n",
            "in": "query",
            "name": "signatures",
            "schema": {
              "type": "string",
              "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of all event data.",
                  "examples": {
                    "tokenTransfer": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                          "blockNumber": 16719956,
                          "timestamp": 1677506087000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "fungible",
                            "subtype": "transfer",
                            "from": "0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc",
                            "to": "0xb3d994978d2bc50d2ce74c45fcd923e7c9c06730",
                            "decimals": 18,
                            "value": "0.030041143652018106"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc",
                            "topic_2": "0x000000000000000000000000b3d994978d2bc50d2ce74c45fcd923e7c9c06730",
                            "data": "0x000000000000000000000000000000000000000000000000006aba42d00667ba"
                          },
                          "txHash": "0x0ca14958f40d348bef24cd259a185c16867479b5f506e329063c4bb0b195a643",
                          "txIndex": 144,
                          "logIndex": 231
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xd4307e0acd12cf46fd6cf93bc264f5d5d1598792",
                          "blockNumber": 16719955,
                          "timestamp": 1677506075000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "nft",
                            "subtype": "mint",
                            "from": "0x0000000000000000000000000000000000000000",
                            "to": "0x192038b97fc5a926367f84743533ad63250be09b",
                            "tokenId": "370349"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "topic_2": "0x000000000000000000000000192038b97fc5a926367f84743533ad63250be09b",
                            "topic_3": "0x000000000000000000000000000000000000000000000000000000000005a6ad"
                          },
                          "txHash": "0x52249e144a905e4e84f185ce4895dbd1c7b53fb9068461869e2c6dc7e2487296",
                          "txIndex": 99,
                          "logIndex": 177
                        }
                      ]
                    },
                    "stablecoinTransfer": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
                          "blockNumber": 16719958,
                          "timestamp": 1677506111000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "stablecoin",
                            "subtype": "transfer",
                            "from": "0x99de7724196070b9ff266adbac8c7abf56890207",
                            "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
                            "decimals": 6,
                            "stablecoin": "USDT",
                            "value": "699.981164"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x00000000000000000000000099de7724196070b9ff266adbac8c7abf56890207",
                            "topic_2": "0x000000000000000000000000a9d1e08c7793af67e9d92fe308d5697fb81d3e43",
                            "data": "0x0000000000000000000000000000000000000000000000000000000029b8dd6c"
                          },
                          "txHash": "0xd77eaf324742498451aeafcfe4b2b9f07d817f6f6b0b1ae13fab5121b7bb32af",
                          "txIndex": 91,
                          "logIndex": 184
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
                          "blockNumber": 16719947,
                          "timestamp": 1677505979000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "stablecoin",
                            "subtype": "transfer",
                            "from": "0x366cbca2412c2829fb80bfc844ed124938dd66c7",
                            "to": "0x28c6c06298d514db089934071355e5743bf21d60",
                            "decimals": 6,
                            "stablecoin": "USDT",
                            "value": "467727"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x000000000000000000000000366cbca2412c2829fb80bfc844ed124938dd66c7",
                            "topic_2": "0x00000000000000000000000028c6c06298d514db089934071355e5743bf21d60",
                            "data": "0x0000000000000000000000000000000000000000000000000000006ce6b3a1c0"
                          },
                          "txHash": "0xb3aa57159446049acb1878b285452deb7fdcd798191472a3bae026006fc41fc7",
                          "txIndex": 66,
                          "logIndex": 69
                        }
                      ]
                    },
                    "multitokenTransfer": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xd955e7bd8ca9f2aad391760f849cfa4ee2d80d57",
                          "blockNumber": 16719956,
                          "timestamp": 1677506087000,
                          "decoded": {
                            "label": "TransferSingle(address,address,address,uint256,uint256)",
                            "type": "multitoken",
                            "subtype": "transfer",
                            "from": "0x3dacc060c993ae03a7f956a4f8ff81a33fa75ea4",
                            "to": "0x5f8e0020c3164fb7eb170d7345672f6948ca0ff4",
                            "operator": "0x1e0049783f008a0085193e00003d00cd54003c71",
                            "multitokenId": "15",
                            "multitokenValue": "1"
                          },
                          "raw": {
                            "topic_0": "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
                            "topic_1": "0x0000000000000000000000001e0049783f008a0085193e00003d00cd54003c71",
                            "topic_2": "0x0000000000000000000000003dacc060c993ae03a7f956a4f8ff81a33fa75ea4",
                            "topic_3": "0x0000000000000000000000005f8e0020c3164fb7eb170d7345672f6948ca0ff4",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000001"
                          },
                          "txHash": "0xd134d76b8a38a031bfad4bd7e1ee390ba610fa71cd66c338f1055260569ab643",
                          "txIndex": 180,
                          "logIndex": 349
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xd955e7bd8ca9f2aad391760f849cfa4ee2d80d57",
                          "blockNumber": 16719785,
                          "timestamp": 1677504011000,
                          "decoded": {
                            "label": "TransferBatch(address,address,address,uint256[],uint256[])",
                            "type": "multitoken",
                            "subtype": "mint",
                            "from": "0x0000000000000000000000000000000000000000",
                            "to": "0x1eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "operator": "0x1eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "multitokenIds": [
                              "26",
                              "21"
                            ],
                            "multitokenValues": [
                              "1",
                              "1"
                            ]
                          },
                          "raw": {
                            "topic_0": "0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb",
                            "topic_1": "0x0000000000000000000000001eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "topic_2": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "topic_3": "0x0000000000000000000000001eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000015000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
                          },
                          "txHash": "0x2c4d5fa08d0d78cd08e3b2df66031f157d47d09dc931f0a0c967a086bd7dc593",
                          "txIndex": 135,
                          "logIndex": 395
                        }
                      ]
                    },
                    "uniswapTrade": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0x939da43b6987a1012a19db7bb971c9d88d409e2e",
                          "blockNumber": 16716951,
                          "timestamp": 1677469631000,
                          "decoded": {
                            "label": "Swap(address,uint256,uint256,uint256,uint256,address)",
                            "type": "uniswap",
                            "subtype": "v2",
                            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "to": "0x29847b89f58cbf4749ab609c623cf4dadd703d68",
                            "token0": "0x80941467df667bfdad333d4dc3527713a620df3c",
                            "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "amount0In": "0",
                            "amount1In": "0.02",
                            "amount0Out": "16.310991135231436277",
                            "amount1Out": "0"
                          },
                          "raw": {
                            "topic_0": "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822",
                            "topic_1": "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "topic_2": "0x00000000000000000000000029847b89f58cbf4749ab609c623cf4dadd703d68",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000e25c4804a603e5f50000000000000000000000000000000000000000000000000000000000000000"
                          },
                          "txHash": "0xd07727fa56151ed6813010859eaeaecb731a3da35b42583a720e60441e760dfb",
                          "txIndex": 105,
                          "logIndex": 316
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0x939da43b6987a1012a19db7bb971c9d88d409e2e",
                          "blockNumber": 16716945,
                          "timestamp": 1677469520000,
                          "decoded": {
                            "label": "Swap(address,uint256,uint256,uint256,uint256,address)",
                            "type": "uniswap",
                            "subtype": "v2",
                            "from": "0x7a250d5630b4cf539739df2c5dacb4c659f2488d",
                            "to": "0xb90dd95cc9a8b603fa5b1ebf1fc54de792d51e44",
                            "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "partiallyRaw": true,
                            "amount0In": "0",
                            "amount1In": "38582795937639190",
                            "amount0Out": "19346934115717712",
                            "amount1Out": "0"
                          },
                          "raw": {
                            "topic_0": "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822",
                            "topic_1": "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "topic_2": "0x00000000000000000000000029847b89f58cbf4749ab609c623cf4dadd703d68",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000e25c4804a603e5f50000000000000000000000000000000000000000000000000000000000000000"
                          },
                          "txHash": "0xd07727fa56151ed6813010859eaeaecb731a3da35b42583a720e60441e760dfb",
                          "txIndex": 77,
                          "logIndex": 421
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8",
                          "blockNumber": 16715826,
                          "timestamp": 1677455963000,
                          "decoded": {
                            "label": "Swap(address,address,int256,int256,uint160,uint128,int24)",
                            "type": "uniswap",
                            "subtype": "v3",
                            "from": "0xef1c6e67703c7bd7107eed8303fbe6ec2554bf6b",
                            "to": "0x2e8daf55f212be91d3fa882cceab193a08fddeb2",
                            "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                            "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "amount0": "2539.314198",
                            "amount1": "-1.545466196980525897",
                            "sqrtPriceX96": "1957504157831843308092484471058274",
                            "liquidity": "16050202700964797693",
                            "tick": 202307
                          },
                          "raw": {
                            "topic_0": "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
                            "topic_1": "0x000000000000000000000000ef1c6e67703c7bd7107eed8303fbe6ec2554bf6b",
                            "topic_2": "0x0000000000000000000000002e8daf55f212be91d3fa882cceab193a08fddeb2",
                            "data": "0x00000000000000000000000000000000000000000000000000000000975adc16ffffffffffffffffffffffffffffffffffffffffffffffffea8d66ae9c9a14b700000000000000000000000000000000000060832d1059b69d1a2cc113896f62000000000000000000000000000000000000000000000000debdc651a4059cfd0000000000000000000000000000000000000000000000000000000000031643"
                          },
                          "txHash": "0x3cb892c1f046f8467a7e081aedbbf90eeca93fa96a892ebf6f3c5db191dc29f5",
                          "txIndex": 4,
                          "logIndex": 32
                        }
                      ]
                    }
                  },
                  "properties": {
                    "chain": {
                      "type": "string",
                      "description": "Name of the chain.",
                      "example": "ethereum"
                    },
                    "address": {
                      "type": "string",
                      "description": "The address associated with the event."
                    },
                    "blockNumber": {
                      "type": "integer",
                      "description": "The block number where the event was recorded."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The timestamp of the event in UNIX format."
                    },
                    "decoded": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Common properties for decoded data events.",
                              "properties": {
                                "label": {
                                  "type": "string",
                                  "description": "The label of the event.",
                                  "example": "Transfer"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of the event.",
                                  "example": "FungibleTransfer"
                                },
                                "subtype": {
                                  "type": "string",
                                  "description": "The subtype of the event.",
                                  "example": "ERC20"
                                },
                                "from": {
                                  "type": "string",
                                  "description": "The sender address of the event.",
                                  "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                },
                                "to": {
                                  "type": "string",
                                  "description": "The receiver address of the event.",
                                  "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "decimals": {
                                  "type": "integer",
                                  "description": "The number of decimal places for the transferred token.",
                                  "example": 18
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the transferred token.",
                                  "example": "1000"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "decimals": {
                                      "type": "integer",
                                      "description": "The number of decimal places for the transferred token.",
                                      "example": 18
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "The value of the transferred token.",
                                      "example": "1000"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "stablecoin": {
                                  "type": "string",
                                  "description": "The address of the stablecoin being transferred.",
                                  "example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Common properties for decoded data events.",
                              "properties": {
                                "label": {
                                  "type": "string",
                                  "description": "The label of the event.",
                                  "example": "Transfer"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of the event.",
                                  "example": "FungibleTransfer"
                                },
                                "subtype": {
                                  "type": "string",
                                  "description": "The subtype of the event.",
                                  "example": "ERC20"
                                },
                                "from": {
                                  "type": "string",
                                  "description": "The sender address of the event.",
                                  "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                },
                                "to": {
                                  "type": "string",
                                  "description": "The receiver address of the event.",
                                  "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "tokenId": {
                                  "type": "string",
                                  "description": "The unique identifier of the NFT being transferred.",
                                  "example": "101"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "operator": {
                                      "type": "string",
                                      "description": "The address of the operator initiating the transfer.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multitokenId": {
                                  "type": "string",
                                  "description": "The unique identifier of the single multitoken being transferred.",
                                  "example": "1"
                                },
                                "multitokenValue": {
                                  "type": "string",
                                  "description": "The value of the single multitoken being transferred.",
                                  "example": "100"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "operator": {
                                      "type": "string",
                                      "description": "The address of the operator initiating the transfer.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multitokenIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "The unique identifiers of the multitokens being transferred.",
                                  "example": [
                                    "1",
                                    "2",
                                    "3"
                                  ]
                                },
                                "multitokenValues": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "The values of the multitokens being transferred.",
                                  "example": [
                                    "100",
                                    "200",
                                    "300"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "token0": {
                                      "type": "string",
                                      "description": "The address of the first token involved in the trade.",
                                      "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                                    },
                                    "token1": {
                                      "type": "string",
                                      "description": "The address of the second token involved in the trade.",
                                      "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                                    },
                                    "partiallyRaw": {
                                      "type": "boolean",
                                      "description": "Indicates whether the trade data is partially raw or not.",
                                      "example": false
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "amount0In": {
                                  "type": "string",
                                  "description": "The input amount of the first token in the trade.",
                                  "example": "0.5"
                                },
                                "amount1In": {
                                  "type": "string",
                                  "description": "The input amount of the second token in the trade.",
                                  "example": "0.0"
                                },
                                "amount0Out": {
                                  "type": "string",
                                  "description": "The output amount of the first token in the trade.",
                                  "example": "0.0"
                                },
                                "amount1Out": {
                                  "type": "string",
                                  "description": "The output amount of the second token in the trade.",
                                  "example": "1.0"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "token0": {
                                      "type": "string",
                                      "description": "The address of the first token involved in the trade.",
                                      "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                                    },
                                    "token1": {
                                      "type": "string",
                                      "description": "The address of the second token involved in the trade.",
                                      "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                                    },
                                    "partiallyRaw": {
                                      "type": "boolean",
                                      "description": "Indicates whether the trade data is partially raw or not.",
                                      "example": false
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "amount0": {
                                  "type": "string",
                                  "description": "The net amount of the first token involved in the trade.",
                                  "example": "0.5"
                                },
                                "amount1": {
                                  "type": "string",
                                  "description": "The net amount of the second token involved in the trade.",
                                  "example": "1.0"
                                },
                                "sqrtPriceX96": {
                                  "type": "string",
                                  "description": "The square root price of the trading pair scaled by 2^96.",
                                  "example": "79228162514264337593543950336"
                                },
                                "liquidity": {
                                  "type": "string",
                                  "description": "The liquidity of the trading pair at the time of the trade.",
                                  "example": "1000"
                                },
                                "tick": {
                                  "type": "integer",
                                  "description": "The tick index of the Uniswap V3 pool at the time of the trade.",
                                  "example": 1000
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "The decoded event data based on the given models."
                    },
                    "raw": {
                      "type": "object",
                      "description": "Raw data associated with the event, including topics and data.",
                      "required": [
                        "topic_0"
                      ],
                      "properties": {
                        "topic_0": {
                          "type": "string",
                          "description": "The first topic of the event, if present.",
                          "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
                        },
                        "topic_1": {
                          "type": "string",
                          "description": "The second topic of the event, if present.",
                          "example": "0x000000000000000000000000742d35cc6634c0532925a3b844bc454e4438f44e"
                        },
                        "topic_2": {
                          "type": "string",
                          "description": "The third topic of the event, if present.",
                          "example": "0x000000000000000000000000b7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                        },
                        "topic_3": {
                          "type": "string",
                          "description": "The fourth topic of the event, if present.",
                          "example": ""
                        },
                        "data": {
                          "type": "string",
                          "description": "The data associated with the event, if present.",
                          "example": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000"
                        }
                      }
                    },
                    "txHash": {
                      "type": "string",
                      "description": "The transaction hash related to the event."
                    },
                    "txIndex": {
                      "type": "integer",
                      "description": "The transaction index within the block."
                    },
                    "logIndex": {
                      "type": "integer",
                      "description": "The log index within the transaction."
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get specified events",
        "tags": [
          "DeFi API"
        ]
      }
    },
    "/v3/data/events": {
      "get": {
        "deprecated": true,
        "description": "<p><b>20 credits per API call</b></p>\n<p>Get all events on given addresses and / or in the requested block range on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>To improve response times and obtain specific data, it is recommended to use proper filtering techniques. Please provide a chain name and a combination of filters that will accomplish this (at least block range or contract addresses must be specified).</li>\n<li>It is possible to specify multiple contract addresses at once by passing them as a comma separated string.</li>\n<li>If block range is not specified, the API attempts to go through all available blocks, which may result in a timeout error.</li>\n<li>When you are filtering data using blockFrom and not using blockTo, blockTo is automatically added as blockFrom + 1000. The same applies when blockTo is present and blockFrom is not. In that case blockFrom is automatically added as blockTo - 1000.</li>\n<li>It is recommended to filter only one specific type of events, which comes with built-in decoding for all the supported types.</li>\n<li>It is, however, also possible to filter by signature hashes, which can be passed together as a comma separated string.</li>\n</ul>\n<p>As noted above, aside from general info and hashed event data, the API also decodes them for you in case you filter by one of the following supported event types:</p>\n<ul>\n<li><code>tokenTransfer</code>: All transfers of fungible tokens (including stablecoins) and NFTs as per ERC-20 and ERC-721 standard.</li>\n<li><code>multitokenTransfer</code>: All transfers of multitokens (both single transfers and batch transfers) as per ERC-1155 standard.</li>\n<li><code>stablecoinTransfer</code>: Refers to the transfer of specific stablecoins on the mainnet. Typically, the top 10 to 16 stablecoins on each chain according to CoinMarketCap are included. If the <code>contractAddresses</code> parameter is also used in the filter combination, any tokens specified in it will also be included in the list.</li>\n<li><code>uniswapTrade</code>: Provides all swap events that occur on both Uniswap V2 and V3. In some cases, it may not be possible to map the swapped amounts to specific tokens. As a result, certain decoded data such as token amounts might be missing or in the original big number format. This will be indicated by the response parameter <code>partiallyRaw: true</code>.</li>\n</ul>\n",
        "operationId": "GetEvents",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain addresses of the contracts where requested events were emitted.\nIt is possible to enter list of up to 10 addresses as a comma separated string.\n",
            "in": "query",
            "name": "contractAddresses",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce"
            }
          },
          {
            "description": "First block to start from (including this one).",
            "in": "query",
            "name": "blockFrom",
            "required": true,
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Last block to finish on (including this one).",
            "in": "query",
            "name": "blockTo",
            "required": true,
            "schema": {
              "type": "number",
              "example": 16779230,
              "minimum": 0
            }
          },
          {
            "description": "The type of events that should be returned, which comes with decoded data in the response\n(cannot be used together with signatures).\n",
            "in": "query",
            "name": "eventType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tokenTransfer",
              "enum": [
                "tokenTransfer",
                "multitokenTransfer",
                "stablecoinTransfer",
                "uniswapTrade"
              ]
            }
          },
          {
            "description": "The types of events that should be returned, specified by hashed signature\n(cannot be used together with eventType).\nIt is possible to enter list of multiple signatures as a comma separated string.\n",
            "in": "query",
            "name": "signatures",
            "schema": {
              "type": "string",
              "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of all event data.",
                  "examples": {
                    "tokenTransfer": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                          "blockNumber": 16719956,
                          "timestamp": 1677506087000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "fungible",
                            "subtype": "transfer",
                            "from": "0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc",
                            "to": "0xb3d994978d2bc50d2ce74c45fcd923e7c9c06730",
                            "decimals": 18,
                            "value": "0.030041143652018106"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc",
                            "topic_2": "0x000000000000000000000000b3d994978d2bc50d2ce74c45fcd923e7c9c06730",
                            "data": "0x000000000000000000000000000000000000000000000000006aba42d00667ba"
                          },
                          "txHash": "0x0ca14958f40d348bef24cd259a185c16867479b5f506e329063c4bb0b195a643",
                          "txIndex": 144,
                          "logIndex": 231
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xd4307e0acd12cf46fd6cf93bc264f5d5d1598792",
                          "blockNumber": 16719955,
                          "timestamp": 1677506075000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "nft",
                            "subtype": "mint",
                            "from": "0x0000000000000000000000000000000000000000",
                            "to": "0x192038b97fc5a926367f84743533ad63250be09b",
                            "tokenId": "370349"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "topic_2": "0x000000000000000000000000192038b97fc5a926367f84743533ad63250be09b",
                            "topic_3": "0x000000000000000000000000000000000000000000000000000000000005a6ad"
                          },
                          "txHash": "0x52249e144a905e4e84f185ce4895dbd1c7b53fb9068461869e2c6dc7e2487296",
                          "txIndex": 99,
                          "logIndex": 177
                        }
                      ]
                    },
                    "stablecoinTransfer": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
                          "blockNumber": 16719958,
                          "timestamp": 1677506111000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "stablecoin",
                            "subtype": "transfer",
                            "from": "0x99de7724196070b9ff266adbac8c7abf56890207",
                            "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
                            "decimals": 6,
                            "stablecoin": "USDT",
                            "value": "699.981164"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x00000000000000000000000099de7724196070b9ff266adbac8c7abf56890207",
                            "topic_2": "0x000000000000000000000000a9d1e08c7793af67e9d92fe308d5697fb81d3e43",
                            "data": "0x0000000000000000000000000000000000000000000000000000000029b8dd6c"
                          },
                          "txHash": "0xd77eaf324742498451aeafcfe4b2b9f07d817f6f6b0b1ae13fab5121b7bb32af",
                          "txIndex": 91,
                          "logIndex": 184
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
                          "blockNumber": 16719947,
                          "timestamp": 1677505979000,
                          "decoded": {
                            "label": "Transfer(address,address,uint256)",
                            "type": "stablecoin",
                            "subtype": "transfer",
                            "from": "0x366cbca2412c2829fb80bfc844ed124938dd66c7",
                            "to": "0x28c6c06298d514db089934071355e5743bf21d60",
                            "decimals": 6,
                            "stablecoin": "USDT",
                            "value": "467727"
                          },
                          "raw": {
                            "topic_0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                            "topic_1": "0x000000000000000000000000366cbca2412c2829fb80bfc844ed124938dd66c7",
                            "topic_2": "0x00000000000000000000000028c6c06298d514db089934071355e5743bf21d60",
                            "data": "0x0000000000000000000000000000000000000000000000000000006ce6b3a1c0"
                          },
                          "txHash": "0xb3aa57159446049acb1878b285452deb7fdcd798191472a3bae026006fc41fc7",
                          "txIndex": 66,
                          "logIndex": 69
                        }
                      ]
                    },
                    "multitokenTransfer": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xd955e7bd8ca9f2aad391760f849cfa4ee2d80d57",
                          "blockNumber": 16719956,
                          "timestamp": 1677506087000,
                          "decoded": {
                            "label": "TransferSingle(address,address,address,uint256,uint256)",
                            "type": "multitoken",
                            "subtype": "transfer",
                            "from": "0x3dacc060c993ae03a7f956a4f8ff81a33fa75ea4",
                            "to": "0x5f8e0020c3164fb7eb170d7345672f6948ca0ff4",
                            "operator": "0x1e0049783f008a0085193e00003d00cd54003c71",
                            "multitokenId": "15",
                            "multitokenValue": "1"
                          },
                          "raw": {
                            "topic_0": "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
                            "topic_1": "0x0000000000000000000000001e0049783f008a0085193e00003d00cd54003c71",
                            "topic_2": "0x0000000000000000000000003dacc060c993ae03a7f956a4f8ff81a33fa75ea4",
                            "topic_3": "0x0000000000000000000000005f8e0020c3164fb7eb170d7345672f6948ca0ff4",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000001"
                          },
                          "txHash": "0xd134d76b8a38a031bfad4bd7e1ee390ba610fa71cd66c338f1055260569ab643",
                          "txIndex": 180,
                          "logIndex": 349
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0xd955e7bd8ca9f2aad391760f849cfa4ee2d80d57",
                          "blockNumber": 16719785,
                          "timestamp": 1677504011000,
                          "decoded": {
                            "label": "TransferBatch(address,address,address,uint256[],uint256[])",
                            "type": "multitoken",
                            "subtype": "mint",
                            "from": "0x0000000000000000000000000000000000000000",
                            "to": "0x1eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "operator": "0x1eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "multitokenIds": [
                              "26",
                              "21"
                            ],
                            "multitokenValues": [
                              "1",
                              "1"
                            ]
                          },
                          "raw": {
                            "topic_0": "0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb",
                            "topic_1": "0x0000000000000000000000001eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "topic_2": "0x0000000000000000000000000000000000000000000000000000000000000000",
                            "topic_3": "0x0000000000000000000000001eb97e5c30c209e95913467fcc42c43274b0fe83",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000015000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
                          },
                          "txHash": "0x2c4d5fa08d0d78cd08e3b2df66031f157d47d09dc931f0a0c967a086bd7dc593",
                          "txIndex": 135,
                          "logIndex": 395
                        }
                      ]
                    },
                    "uniswapTrade": {
                      "value": [
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0x939da43b6987a1012a19db7bb971c9d88d409e2e",
                          "blockNumber": 16716951,
                          "timestamp": 1677469631000,
                          "decoded": {
                            "label": "Swap(address,uint256,uint256,uint256,uint256,address)",
                            "type": "uniswap",
                            "subtype": "v2",
                            "from": "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "to": "0x29847b89f58cbf4749ab609c623cf4dadd703d68",
                            "token0": "0x80941467df667bfdad333d4dc3527713a620df3c",
                            "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "amount0In": "0",
                            "amount1In": "0.02",
                            "amount0Out": "16.310991135231436277",
                            "amount1Out": "0"
                          },
                          "raw": {
                            "topic_0": "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822",
                            "topic_1": "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "topic_2": "0x00000000000000000000000029847b89f58cbf4749ab609c623cf4dadd703d68",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000e25c4804a603e5f50000000000000000000000000000000000000000000000000000000000000000"
                          },
                          "txHash": "0xd07727fa56151ed6813010859eaeaecb731a3da35b42583a720e60441e760dfb",
                          "txIndex": 105,
                          "logIndex": 316
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0x939da43b6987a1012a19db7bb971c9d88d409e2e",
                          "blockNumber": 16716945,
                          "timestamp": 1677469520000,
                          "decoded": {
                            "label": "Swap(address,uint256,uint256,uint256,uint256,address)",
                            "type": "uniswap",
                            "subtype": "v2",
                            "from": "0x7a250d5630b4cf539739df2c5dacb4c659f2488d",
                            "to": "0xb90dd95cc9a8b603fa5b1ebf1fc54de792d51e44",
                            "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "partiallyRaw": true,
                            "amount0In": "0",
                            "amount1In": "38582795937639190",
                            "amount0Out": "19346934115717712",
                            "amount1Out": "0"
                          },
                          "raw": {
                            "topic_0": "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822",
                            "topic_1": "0x00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45",
                            "topic_2": "0x00000000000000000000000029847b89f58cbf4749ab609c623cf4dadd703d68",
                            "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000e25c4804a603e5f50000000000000000000000000000000000000000000000000000000000000000"
                          },
                          "txHash": "0xd07727fa56151ed6813010859eaeaecb731a3da35b42583a720e60441e760dfb",
                          "txIndex": 77,
                          "logIndex": 421
                        },
                        {
                          "chain": "ethereum-mainnet",
                          "address": "0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8",
                          "blockNumber": 16715826,
                          "timestamp": 1677455963000,
                          "decoded": {
                            "label": "Swap(address,address,int256,int256,uint160,uint128,int24)",
                            "type": "uniswap",
                            "subtype": "v3",
                            "from": "0xef1c6e67703c7bd7107eed8303fbe6ec2554bf6b",
                            "to": "0x2e8daf55f212be91d3fa882cceab193a08fddeb2",
                            "token0": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                            "token1": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "amount0": "2539.314198",
                            "amount1": "-1.545466196980525897",
                            "sqrtPriceX96": "1957504157831843308092484471058274",
                            "liquidity": "16050202700964797693",
                            "tick": 202307
                          },
                          "raw": {
                            "topic_0": "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
                            "topic_1": "0x000000000000000000000000ef1c6e67703c7bd7107eed8303fbe6ec2554bf6b",
                            "topic_2": "0x0000000000000000000000002e8daf55f212be91d3fa882cceab193a08fddeb2",
                            "data": "0x00000000000000000000000000000000000000000000000000000000975adc16ffffffffffffffffffffffffffffffffffffffffffffffffea8d66ae9c9a14b700000000000000000000000000000000000060832d1059b69d1a2cc113896f62000000000000000000000000000000000000000000000000debdc651a4059cfd0000000000000000000000000000000000000000000000000000000000031643"
                          },
                          "txHash": "0x3cb892c1f046f8467a7e081aedbbf90eeca93fa96a892ebf6f3c5db191dc29f5",
                          "txIndex": 4,
                          "logIndex": 32
                        }
                      ]
                    }
                  },
                  "properties": {
                    "chain": {
                      "type": "string",
                      "description": "Name of the chain.",
                      "example": "ethereum"
                    },
                    "address": {
                      "type": "string",
                      "description": "The address associated with the event."
                    },
                    "blockNumber": {
                      "type": "integer",
                      "description": "The block number where the event was recorded."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The timestamp of the event in UNIX format."
                    },
                    "decoded": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Common properties for decoded data events.",
                              "properties": {
                                "label": {
                                  "type": "string",
                                  "description": "The label of the event.",
                                  "example": "Transfer"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of the event.",
                                  "example": "FungibleTransfer"
                                },
                                "subtype": {
                                  "type": "string",
                                  "description": "The subtype of the event.",
                                  "example": "ERC20"
                                },
                                "from": {
                                  "type": "string",
                                  "description": "The sender address of the event.",
                                  "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                },
                                "to": {
                                  "type": "string",
                                  "description": "The receiver address of the event.",
                                  "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "decimals": {
                                  "type": "integer",
                                  "description": "The number of decimal places for the transferred token.",
                                  "example": 18
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The value of the transferred token.",
                                  "example": "1000"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "decimals": {
                                      "type": "integer",
                                      "description": "The number of decimal places for the transferred token.",
                                      "example": 18
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "The value of the transferred token.",
                                      "example": "1000"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "stablecoin": {
                                  "type": "string",
                                  "description": "The address of the stablecoin being transferred.",
                                  "example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Common properties for decoded data events.",
                              "properties": {
                                "label": {
                                  "type": "string",
                                  "description": "The label of the event.",
                                  "example": "Transfer"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "The type of the event.",
                                  "example": "FungibleTransfer"
                                },
                                "subtype": {
                                  "type": "string",
                                  "description": "The subtype of the event.",
                                  "example": "ERC20"
                                },
                                "from": {
                                  "type": "string",
                                  "description": "The sender address of the event.",
                                  "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                },
                                "to": {
                                  "type": "string",
                                  "description": "The receiver address of the event.",
                                  "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "tokenId": {
                                  "type": "string",
                                  "description": "The unique identifier of the NFT being transferred.",
                                  "example": "101"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "operator": {
                                      "type": "string",
                                      "description": "The address of the operator initiating the transfer.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multitokenId": {
                                  "type": "string",
                                  "description": "The unique identifier of the single multitoken being transferred.",
                                  "example": "1"
                                },
                                "multitokenValue": {
                                  "type": "string",
                                  "description": "The value of the single multitoken being transferred.",
                                  "example": "100"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "operator": {
                                      "type": "string",
                                      "description": "The address of the operator initiating the transfer.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "multitokenIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "The unique identifiers of the multitokens being transferred.",
                                  "example": [
                                    "1",
                                    "2",
                                    "3"
                                  ]
                                },
                                "multitokenValues": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "The values of the multitokens being transferred.",
                                  "example": [
                                    "100",
                                    "200",
                                    "300"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "token0": {
                                      "type": "string",
                                      "description": "The address of the first token involved in the trade.",
                                      "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                                    },
                                    "token1": {
                                      "type": "string",
                                      "description": "The address of the second token involved in the trade.",
                                      "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                                    },
                                    "partiallyRaw": {
                                      "type": "boolean",
                                      "description": "Indicates whether the trade data is partially raw or not.",
                                      "example": false
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "amount0In": {
                                  "type": "string",
                                  "description": "The input amount of the first token in the trade.",
                                  "example": "0.5"
                                },
                                "amount1In": {
                                  "type": "string",
                                  "description": "The input amount of the second token in the trade.",
                                  "example": "0.0"
                                },
                                "amount0Out": {
                                  "type": "string",
                                  "description": "The output amount of the first token in the trade.",
                                  "example": "0.0"
                                },
                                "amount1Out": {
                                  "type": "string",
                                  "description": "The output amount of the second token in the trade.",
                                  "example": "1.0"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "description": "Common properties for decoded data events.",
                                  "properties": {
                                    "label": {
                                      "type": "string",
                                      "description": "The label of the event.",
                                      "example": "Transfer"
                                    },
                                    "type": {
                                      "type": "string",
                                      "description": "The type of the event.",
                                      "example": "FungibleTransfer"
                                    },
                                    "subtype": {
                                      "type": "string",
                                      "description": "The subtype of the event.",
                                      "example": "ERC20"
                                    },
                                    "from": {
                                      "type": "string",
                                      "description": "The sender address of the event.",
                                      "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                                    },
                                    "to": {
                                      "type": "string",
                                      "description": "The receiver address of the event.",
                                      "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "token0": {
                                      "type": "string",
                                      "description": "The address of the first token involved in the trade.",
                                      "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                                    },
                                    "token1": {
                                      "type": "string",
                                      "description": "The address of the second token involved in the trade.",
                                      "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                                    },
                                    "partiallyRaw": {
                                      "type": "boolean",
                                      "description": "Indicates whether the trade data is partially raw or not.",
                                      "example": false
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "amount0": {
                                  "type": "string",
                                  "description": "The net amount of the first token involved in the trade.",
                                  "example": "0.5"
                                },
                                "amount1": {
                                  "type": "string",
                                  "description": "The net amount of the second token involved in the trade.",
                                  "example": "1.0"
                                },
                                "sqrtPriceX96": {
                                  "type": "string",
                                  "description": "The square root price of the trading pair scaled by 2^96.",
                                  "example": "79228162514264337593543950336"
                                },
                                "liquidity": {
                                  "type": "string",
                                  "description": "The liquidity of the trading pair at the time of the trade.",
                                  "example": "1000"
                                },
                                "tick": {
                                  "type": "integer",
                                  "description": "The tick index of the Uniswap V3 pool at the time of the trade.",
                                  "example": 1000
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "description": "The decoded event data based on the given models."
                    },
                    "raw": {
                      "type": "object",
                      "description": "Raw data associated with the event, including topics and data.",
                      "required": [
                        "topic_0"
                      ],
                      "properties": {
                        "topic_0": {
                          "type": "string",
                          "description": "The first topic of the event, if present.",
                          "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
                        },
                        "topic_1": {
                          "type": "string",
                          "description": "The second topic of the event, if present.",
                          "example": "0x000000000000000000000000742d35cc6634c0532925a3b844bc454e4438f44e"
                        },
                        "topic_2": {
                          "type": "string",
                          "description": "The third topic of the event, if present.",
                          "example": "0x000000000000000000000000b7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                        },
                        "topic_3": {
                          "type": "string",
                          "description": "The fourth topic of the event, if present.",
                          "example": ""
                        },
                        "data": {
                          "type": "string",
                          "description": "The data associated with the event, if present.",
                          "example": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000"
                        }
                      }
                    },
                    "txHash": {
                      "type": "string",
                      "description": "The transaction hash related to the event."
                    },
                    "txIndex": {
                      "type": "integer",
                      "description": "The transaction index within the block."
                    },
                    "logIndex": {
                      "type": "integer",
                      "description": "The log index within the transaction."
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get specified events",
        "tags": [
          "DeFi API"
        ]
      }
    },
    "/v4/data/blocks": {
      "get": {
        "description": "<p><b>10 credits per API call</b></p>\n<p>Get information about blocks (when they were added, how many NFTs and events were ingested and list of transaction hashes that were processed within them) on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started, provide a chain and specify one of the filters listed below (combination of these filters is not allowed):</p>\n<ul>\n<li>List of block numbers separated by comma</li>\n<li>Range of block numbers</li>\n<li>Date range when blocks were processed</li>\n<li>When you are filtering data using blockFrom and not using blockTo, blockTo is automatically added as blockFrom + 1000. The same applies when blockTo is present and blockFrom is not. In that case blockFrom is automatically added as blockTo - 1000.</li>\n</ul>\n",
        "operationId": "GetBlocksV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "List of block numbers, separated by comma.",
            "in": "query",
            "name": "blockIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": "1,2,4,400",
              "minimum": 0
            }
          },
          {
            "description": "Range of block numbers. Both blockFrom and blockTo need to be specified.",
            "in": "query",
            "name": "blockFrom",
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Range of block numbers. Both blockFrom and blockTo need to be specified.",
            "in": "query",
            "name": "blockTo",
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Date range when blocks were processed. Both timeFrom and timeTo need to be specified.",
            "in": "query",
            "name": "timeFrom",
            "schema": {
              "type": "string",
              "example": "2022-12-24T00:10"
            }
          },
          {
            "description": "Date range when blocks were processed. Both timeFrom and timeTo need to be specified.",
            "in": "query",
            "name": "timeTo",
            "schema": {
              "type": "string",
              "example": "2022-12-24T00:20"
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "blockNumber": {
                        "type": "integer",
                        "description": "The block number in the blockchain.",
                        "example": 10
                      },
                      "blockTimestamp": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The timestamp when the block was created, in milliseconds since Unix epoch.",
                        "example": 1598671520000
                      },
                      "hash": {
                        "type": "string",
                        "description": "The hash of the block.",
                        "example": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af"
                      },
                      "eventIngestedSize": {
                        "type": "integer",
                        "description": "The number of ingested events in the block.",
                        "example": 0
                      },
                      "nftIngestedSize": {
                        "type": "integer",
                        "description": "The number of ingested NFTs in the block.",
                        "example": 0
                      },
                      "txHashes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The array of transaction hashes included in the block.",
                        "example": [
                          "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
                        ]
                      }
                    }
                  },
                  "description": "List of blocks added to a blockchain.",
                  "example": [
                    {
                      "blockNumber": 10,
                      "blockTimestamp": 1598671520000,
                      "hash": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af",
                      "eventIngestedSize": 0,
                      "nftIngestedSize": 0
                    },
                    {
                      "blockNumber": 11,
                      "blockTimestamp": 1598671540000,
                      "hash": "0xa78e7a9c6910fea66a981389735e0c652f1625905c6e0dca08d3f5c1694b7cc4",
                      "eventIngestedSize": 1,
                      "nftIngestedSize": 0,
                      "txHashes": [
                        "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
                      ]
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get specified blocks",
        "tags": [
          "DeFi API"
        ]
      }
    },
    "/v3/data/blocks": {
      "get": {
        "deprecated": true,
        "description": "<p><b>10 credits per API call</b></p>\n<p>Get information about blocks (when they were added, how many NFTs and events were ingested and list of transaction hashes that were processed within them) on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started, provide a chain and specify one of the filters listed below (combination of these filters is not allowed):</p>\n<ul>\n<li>List of block numbers separated by comma</li>\n<li>Range of block numbers</li>\n<li>Date range when blocks were processed</li>\n<li>When you are filtering data using blockFrom and not using blockTo, blockTo is automatically added as blockFrom + 1000. The same applies when blockTo is present and blockFrom is not. In that case blockFrom is automatically added as blockTo - 1000.</li>\n</ul>\n",
        "operationId": "GetBlocks",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "List of block numbers, separated by comma.",
            "in": "query",
            "name": "blockIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": "1,2,4,400",
              "minimum": 0
            }
          },
          {
            "description": "Range of block numbers. Both blockFrom and blockTo need to be specified.",
            "in": "query",
            "name": "blockFrom",
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Range of block numbers. Both blockFrom and blockTo need to be specified.",
            "in": "query",
            "name": "blockTo",
            "schema": {
              "type": "number",
              "example": 16499510,
              "minimum": 0
            }
          },
          {
            "description": "Date range when blocks were processed. Both timeFrom and timeTo need to be specified.",
            "in": "query",
            "name": "timeFrom",
            "schema": {
              "type": "string",
              "example": "2022-12-24T00:10"
            }
          },
          {
            "description": "Date range when blocks were processed. Both timeFrom and timeTo need to be specified.",
            "in": "query",
            "name": "timeTo",
            "schema": {
              "type": "string",
              "example": "2022-12-24T00:20"
            }
          },
          {
            "description": "The number of items per page (default is 50).",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "example": 10,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "description": "The offset to obtain next page of the data.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "blockNumber": {
                        "type": "integer",
                        "description": "The block number in the blockchain.",
                        "example": 10
                      },
                      "blockTimestamp": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The timestamp when the block was created, in milliseconds since Unix epoch.",
                        "example": 1598671520000
                      },
                      "hash": {
                        "type": "string",
                        "description": "The hash of the block.",
                        "example": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af"
                      },
                      "eventIngestedSize": {
                        "type": "integer",
                        "description": "The number of ingested events in the block.",
                        "example": 0
                      },
                      "nftIngestedSize": {
                        "type": "integer",
                        "description": "The number of ingested NFTs in the block.",
                        "example": 0
                      },
                      "txHashes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The array of transaction hashes included in the block.",
                        "example": [
                          "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
                        ]
                      }
                    }
                  },
                  "description": "List of blocks added to a blockchain.",
                  "example": [
                    {
                      "blockNumber": 10,
                      "blockTimestamp": 1598671520000,
                      "hash": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af",
                      "eventIngestedSize": 0,
                      "nftIngestedSize": 0
                    },
                    {
                      "blockNumber": 11,
                      "blockTimestamp": 1598671540000,
                      "hash": "0xa78e7a9c6910fea66a981389735e0c652f1625905c6e0dca08d3f5c1694b7cc4",
                      "eventIngestedSize": 1,
                      "nftIngestedSize": 0,
                      "txHashes": [
                        "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
                      ]
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get specified blocks",
        "tags": [
          "DeFi API"
        ]
      }
    },
    "/v4/data/blocks/latest": {
      "get": {
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get information about latest added block on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started, you can just provide a chain.</p>\n",
        "operationId": "GetLatestBlockV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "blockNumber": {
                      "type": "integer",
                      "description": "The block number in the blockchain.",
                      "example": 10
                    },
                    "blockTimestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The timestamp when the block was created, in milliseconds since Unix epoch.",
                      "example": 1598671520000
                    },
                    "hash": {
                      "type": "string",
                      "description": "The hash of the block.",
                      "example": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af"
                    },
                    "eventIngestedSize": {
                      "type": "integer",
                      "description": "The number of ingested events in the block.",
                      "example": 0
                    },
                    "nftIngestedSize": {
                      "type": "integer",
                      "description": "The number of ingested NFTs in the block.",
                      "example": 0
                    },
                    "txHashes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The array of transaction hashes included in the block.",
                      "example": [
                        "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
                      ]
                    }
                  },
                  "description": "Latest block added to a blockchain.",
                  "example": {
                    "blockNumber": 25987956,
                    "blockTimestamp": 1677372871000,
                    "hash": "0x047a6ab09f86c760c145dc09b7a43b74d6ad957133ba4462a5530c642d4d9f17",
                    "eventIngestedSize": 351,
                    "nftIngestedSize": 7,
                    "txHashes": [
                      "0x01a7983d1391b74305840e4960ba6c61417a9398cb938c3522d0a4a9cedf488f",
                      "0x0478fdae7e5e6f1eb522e6f43ba760c924b1f72d16e4dadc332f150829d09cbe",
                      "0x05d00f08ae523e445c3b1e7bbabec1896091234643d50e8bcdb76ddd3ff3827a",
                      "0x0b644c19257cf34ab98c509c7901af5a4ad8c6f537b625b46ee771a45f1940dc",
                      "0x0c1016bf317946d9997588ee3b932bc8ba6033cfcb83eca4b5ebcc4f5eaa076d"
                    ]
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get latest block",
        "tags": [
          "DeFi API"
        ]
      }
    },
    "/v3/data/blocks/latest": {
      "get": {
        "deprecated": true,
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get information about latest added block on the following blockchains:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n</ul>\n<p>To get started, you can just provide a chain.</p>\n",
        "operationId": "GetLatestBlock",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "blockNumber": {
                      "type": "integer",
                      "description": "The block number in the blockchain.",
                      "example": 10
                    },
                    "blockTimestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The timestamp when the block was created, in milliseconds since Unix epoch.",
                      "example": 1598671520000
                    },
                    "hash": {
                      "type": "string",
                      "description": "The hash of the block.",
                      "example": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af"
                    },
                    "eventIngestedSize": {
                      "type": "integer",
                      "description": "The number of ingested events in the block.",
                      "example": 0
                    },
                    "nftIngestedSize": {
                      "type": "integer",
                      "description": "The number of ingested NFTs in the block.",
                      "example": 0
                    },
                    "txHashes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The array of transaction hashes included in the block.",
                      "example": [
                        "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
                      ]
                    }
                  },
                  "description": "Latest block added to a blockchain.",
                  "example": {
                    "blockNumber": 25987956,
                    "blockTimestamp": 1677372871000,
                    "hash": "0x047a6ab09f86c760c145dc09b7a43b74d6ad957133ba4462a5530c642d4d9f17",
                    "eventIngestedSize": 351,
                    "nftIngestedSize": 7,
                    "txHashes": [
                      "0x01a7983d1391b74305840e4960ba6c61417a9398cb938c3522d0a4a9cedf488f",
                      "0x0478fdae7e5e6f1eb522e6f43ba760c924b1f72d16e4dadc332f150829d09cbe",
                      "0x05d00f08ae523e445c3b1e7bbabec1896091234643d50e8bcdb76ddd3ff3827a",
                      "0x0b644c19257cf34ab98c509c7901af5a4ad8c6f537b625b46ee771a45f1940dc",
                      "0x0c1016bf317946d9997588ee3b932bc8ba6033cfcb83eca4b5ebcc4f5eaa076d"
                    ]
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get latest block",
        "tags": [
          "DeFi API"
        ]
      }
    },
    "/v4/data/tokens": {
      "get": {
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get information about your favorite token! Our API lets you search for all tokens on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n<li>Tezos - tezos-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain and address of any fungible token, NFT or multitoken collection. If available, our API will return information about them such as their name, symbol, supply, and more.</li>\n<li>You can also get extra infomation (such as metadata) of a specific NFT or multitoken by passing <code>tokenId</code> as a query parameter.</li>\n</ul>\n",
        "operationId": "GetTokensV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the token (NFT collection or any fungible token).",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The ID of a specific NFT token.",
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the fungible token.",
                          "example": "USDC"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the fungible token.",
                          "example": "USD Coin"
                        },
                        "supply": {
                          "type": "string",
                          "description": "The total supply of the fungible token.",
                          "example": "1000000000"
                        },
                        "decimals": {
                          "type": "number",
                          "description": "The number of decimal places for the fungible token.",
                          "example": 6
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC20, BEP20).",
                          "example": "ERC20"
                        },
                        "cap": {
                          "type": "string",
                          "description": "The maximum supply cap of the fungible token.",
                          "example": "2000000000"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the NFT collection.",
                          "example": "ART"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the NFT collection.",
                          "example": "Art Collection"
                        },
                        "supply": {
                          "type": "string",
                          "description": "The total supply of the NFT collection.",
                          "example": "5000"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC721, ERC1155).",
                          "example": "ERC721"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the multitoken collection.",
                          "example": "GAME"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the multitoken collection.",
                          "example": "Game Assets"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC1155).",
                          "example": "ERC1155"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the NFT token.",
                          "example": "ART"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the NFT token.",
                          "example": "Mona Lisa"
                        },
                        "metadata": {
                          "type": "object",
                          "description": "The metadata associated with the NFT token.",
                          "example": {
                            "artist": "Leonardo da Vinci",
                            "year": 1503
                          }
                        },
                        "metadataURI": {
                          "type": "string",
                          "description": "The URI of the metadata associated with the NFT token.",
                          "example": "https://example.com/metadata/123"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC721, ERC1155).",
                          "example": "ERC721"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The full name of the NFT collection.",
                          "example": "Art Collection"
                        },
                        "description": {
                          "type": "string",
                          "description": "The total supply of the NFT collection.",
                          "example": "5000"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC721, ERC1155).",
                          "example": "ERC721"
                        },
                        "contractMetadata": {
                          "type": "object",
                          "description": "Additional information about the contract"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the fungible token.",
                          "example": "USDC"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the fungible token.",
                          "example": "USD Coin"
                        },
                        "description": {
                          "type": "string",
                          "description": "The describtion of the fungible token.",
                          "example": "USD Coin"
                        },
                        "supply": {
                          "type": "string",
                          "description": "The total supply of the fungible token.",
                          "example": "1000000000"
                        },
                        "decimals": {
                          "type": "number",
                          "description": "The number of decimal places for the fungible token.",
                          "example": 6
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., fungible, nft).",
                          "example": "fungible"
                        }
                      }
                    }
                  ],
                  "description": "Information about specific collection or token\n(not all fields are available for every token, e.g. some multitokens do not have name and symbol).\n",
                  "example": {
                    "name": "BeefyCollectibles",
                    "symbol": "RareItem",
                    "tokenType": "nft",
                    "metadataURI": "QmYrUYv3kCXsrbs8YGguwZkyyMgGkgdQpbse8dZrDaruy5",
                    "metadata": {
                      "name": "Cowmmunity Ambassador",
                      "description": "Represents one of the most important roles in any civilization, as on him depends the molding of the community.",
                      "image": "QmbNsFNDCRYnswu5rtjTPNPkkn8y23DCXVkebrsx2b9fjg"
                    },
                    "supply": "13"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Collection or token not found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "description": "data-api.token",
                      "example": "data-api.token",
                      "type": "string"
                    },
                    "message": {
                      "description": "Collection or token not found on chain ${chain}.",
                      "example": "Collection or token not found on chain bsc-mainnet.",
                      "type": "string"
                    },
                    "statusCode": {
                      "description": "404",
                      "example": 404,
                      "type": "number"
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get information about collection or token",
        "tags": [
          "Token API"
        ]
      }
    },
    "/v3/data/tokens": {
      "get": {
        "deprecated": true,
        "description": "<p><b>1 credit per API call</b></p>\n<p>Get information about your favorite token! Our API lets you search for all tokens on:</p>\n<ul>\n<li>Celo - celo / celo-testnet</li>\n<li>Ethereum - ethereum / ethereum-sepolia / ethereum-holesky</li>\n<li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>\n<li>Polygon - polygon</li>\n<li>Horizen EON - eon-mainnet</li>\n<li>Chiliz - chiliz-mainnet</li>\n<li>Tezos - tezos-mainnet</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain and address of any fungible token, NFT or multitoken collection. If available, our API will return information about them such as their name, symbol, supply, and more.</li>\n<li>You can also get extra infomation (such as metadata) of a specific NFT or multitoken by passing <code>tokenId</code> as a query parameter.</li>\n</ul>\n",
        "operationId": "GetTokens",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ethereum",
              "enum": [
                "ethereum",
                "ethereum-sepolia",
                "ethereum-holesky",
                "celo",
                "celo-testnet",
                "bsc",
                "bsc-testnet",
                "polygon",
                "eon",
                "chiliz"
              ]
            }
          },
          {
            "description": "The blockchain address of the token (NFT collection or any fungible token).",
            "in": "query",
            "name": "tokenAddress",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contract address of the token.",
              "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
            }
          },
          {
            "description": "The ID of a specific NFT token.",
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string",
              "description": "ID of the token.",
              "maxLength": 78,
              "example": "3",
              "format": "uint256"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the fungible token.",
                          "example": "USDC"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the fungible token.",
                          "example": "USD Coin"
                        },
                        "supply": {
                          "type": "string",
                          "description": "The total supply of the fungible token.",
                          "example": "1000000000"
                        },
                        "decimals": {
                          "type": "number",
                          "description": "The number of decimal places for the fungible token.",
                          "example": 6
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC20, BEP20).",
                          "example": "ERC20"
                        },
                        "cap": {
                          "type": "string",
                          "description": "The maximum supply cap of the fungible token.",
                          "example": "2000000000"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the NFT collection.",
                          "example": "ART"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the NFT collection.",
                          "example": "Art Collection"
                        },
                        "supply": {
                          "type": "string",
                          "description": "The total supply of the NFT collection.",
                          "example": "5000"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC721, ERC1155).",
                          "example": "ERC721"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the multitoken collection.",
                          "example": "GAME"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the multitoken collection.",
                          "example": "Game Assets"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC1155).",
                          "example": "ERC1155"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the NFT token.",
                          "example": "ART"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the NFT token.",
                          "example": "Mona Lisa"
                        },
                        "metadata": {
                          "type": "object",
                          "description": "The metadata associated with the NFT token.",
                          "example": {
                            "artist": "Leonardo da Vinci",
                            "year": 1503
                          }
                        },
                        "metadataURI": {
                          "type": "string",
                          "description": "The URI of the metadata associated with the NFT token.",
                          "example": "https://example.com/metadata/123"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC721, ERC1155).",
                          "example": "ERC721"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The full name of the NFT collection.",
                          "example": "Art Collection"
                        },
                        "description": {
                          "type": "string",
                          "description": "The total supply of the NFT collection.",
                          "example": "5000"
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., ERC721, ERC1155).",
                          "example": "ERC721"
                        },
                        "contractMetadata": {
                          "type": "object",
                          "description": "Additional information about the contract"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the fungible token.",
                          "example": "USDC"
                        },
                        "name": {
                          "type": "string",
                          "description": "The full name of the fungible token.",
                          "example": "USD Coin"
                        },
                        "description": {
                          "type": "string",
                          "description": "The describtion of the fungible token.",
                          "example": "USD Coin"
                        },
                        "supply": {
                          "type": "string",
                          "description": "The total supply of the fungible token.",
                          "example": "1000000000"
                        },
                        "decimals": {
                          "type": "number",
                          "description": "The number of decimal places for the fungible token.",
                          "example": 6
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "The type of the token (e.g., fungible, nft).",
                          "example": "fungible"
                        }
                      }
                    }
                  ],
                  "description": "Information about specific collection or token\n(not all fields are available for every token, e.g. some multitokens do not have name and symbol).\n",
                  "example": {
                    "name": "BeefyCollectibles",
                    "symbol": "RareItem",
                    "tokenType": "nft",
                    "metadataURI": "QmYrUYv3kCXsrbs8YGguwZkyyMgGkgdQpbse8dZrDaruy5",
                    "metadata": {
                      "name": "Cowmmunity Ambassador",
                      "description": "Represents one of the most important roles in any civilization, as on him depends the molding of the community.",
                      "image": "QmbNsFNDCRYnswu5rtjTPNPkkn8y23DCXVkebrsx2b9fjg"
                    },
                    "supply": "13"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Collection or token not found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "description": "data-api.token",
                      "example": "data-api.token",
                      "type": "string"
                    },
                    "message": {
                      "description": "Collection or token not found on chain ${chain}.",
                      "example": "Collection or token not found on chain bsc-mainnet.",
                      "type": "string"
                    },
                    "statusCode": {
                      "description": "404",
                      "example": 404,
                      "type": "number"
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get information about collection or token",
        "tags": [
          "Token API"
        ]
      }
    },
    "/v4/data/utxos": {
      "get": {
        "description": "<p><b>100 credits per API call</b></p>\n<p>Get unspent UTXOs for a specific address up to a specific total amount.\nIf you want to prepare a transaction on UTXO-based chains like Bitcoin, you need to enter unspent UTXOs to be able to perform a transaction. By providing ```totalValue``` as a total, our API will return a list of UTXOs that will be enough to cover the transaction.</p>\nOur API lets you get the unpenst UTXOs for a specific address on:</p>\n<ul>\n<li>Bitcoin - bitcoin / bitcoin-testnet</li>\n<li>Litecoin - litecoin / litecoin-testnet</li>\n<li>Dogecoin - doge / doge-testnet</li>\n<li>Cardano - cardano / cardano-preprod</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain and address you want to list unspent UTXOs for. If available, our API will return information about the unspent UTXOs for a specific address. API traverses latest 200k incoming transactions.</li>\n</ul>\n",
        "operationId": "GetUtxosByAddressV4",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "description": "The blockchain to work with.",
              "type": "string",
              "example": "bitcoin",
              "enum": [
                "bitcoin",
                "bitcoin-mainnet",
                "bitcoin-testnet",
                "litecoin",
                "litecoin-mainnet",
                "litecoin-testnet",
                "doge",
                "doge-mainnet",
                "doge-testnet",
                "cardano",
                "cardano-mainnet",
                "cardano-preprod"
              ]
            }
          },
          {
            "description": "The blockchain address.",
            "in": "query",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
            }
          },
          {
            "description": "The total amount of transaction you want to send. Only UTXOs up to this amount will be returned, so you will not spend more than you need.",
            "in": "query",
            "name": "totalValue",
            "required": true,
            "schema": {
              "type": "number",
              "example": 0.0001,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Information about specific collection or token\n(not all fields are available for every token, e.g. some multitokens do not have name and symbol).\n",
                  "items": {
                    "type": "object",
                    "required": [
                      "chain",
                      "address",
                      "txHash",
                      "index",
                      "value",
                      "valueAsString"
                    ],
                    "properties": {
                      "chain": {
                        "description": "The blockchain to work with.",
                        "type": "string",
                        "example": "bitcoin",
                        "enum": [
                          "bitcoin",
                          "bitcoin-mainnet",
                          "bitcoin-testnet",
                          "litecoin",
                          "litecoin-mainnet",
                          "litecoin-testnet",
                          "doge",
                          "doge-mainnet",
                          "doge-testnet",
                          "cardano",
                          "cardano-mainnet",
                          "cardano-preprod"
                        ]
                      },
                      "address": {
                        "type": "string",
                        "description": "Address of the UTXO",
                        "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
                      },
                      "txHash": {
                        "type": "string",
                        "description": "Hash of the transaction this UTXO is present in",
                        "example": "0x1b5b3e8a671434bf5d0d38e3e52dcafac484441a48bfae4a3f71e5b0b3093d8e"
                      },
                      "index": {
                        "type": "number",
                        "description": "Index of the UTXO in the transaction",
                        "example": 0
                      },
                      "value": {
                        "type": "number",
                        "description": "Value of the UTXO, in BTC, LTC or DOGE.",
                        "example": 0.0001
                      },
                      "valueAsString": {
                        "type": "string",
                        "description": "String representation of the value of the UTXO, in BTC, LTC or DOGE.",
                        "example": "0.0001"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get unspent UTXOs for an address",
        "tags": [
          "Wallet API"
        ]
      }
    },
    "/v3/data/utxos": {
      "get": {
        "deprecated": true,
        "description": "<p><b>100 credits per API call</b></p>\n<p>Get unspent UTXOs for a specific address up to a specific total amount.\nIf you want to prepare a transaction on UTXO-based chains like Bitcoin, you need to enter unspent UTXOs to be able to perform a transaction. By providing ```totalValue``` as a total, our API will return a list of UTXOs that will be enough to cover the transaction.</p>\nOur API lets you get the unpenst UTXOs for a specific address on:</p>\n<ul>\n<li>Bitcoin - bitcoin / bitcoin-testnet</li>\n<li>Litecoin - litecoin / litecoin-testnet</li>\n<li>Dogecoin - doge / doge-testnet</li>\n<li>Cardano - cardano / cardano-preprod</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain and address you want to list unspent UTXOs for. If available, our API will return information about the unspent UTXOs for a specific address. API traverses latest 200k incoming transactions.</li>\n</ul>\n",
        "operationId": "GetUtxosByAddress",
        "parameters": [
          {
            "description": "The blockchain to work with.",
            "in": "query",
            "name": "chain",
            "required": true,
            "schema": {
              "description": "The blockchain to work with.",
              "type": "string",
              "example": "bitcoin",
              "enum": [
                "bitcoin",
                "bitcoin-mainnet",
                "bitcoin-testnet",
                "litecoin",
                "litecoin-mainnet",
                "litecoin-testnet",
                "doge",
                "doge-mainnet",
                "doge-testnet",
                "cardano",
                "cardano-mainnet",
                "cardano-preprod"
              ]
            }
          },
          {
            "description": "The blockchain address.",
            "in": "query",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
            }
          },
          {
            "description": "The total amount of transaction you want to send. Only UTXOs up to this amount will be returned, so you will not spend more than you need.",
            "in": "query",
            "name": "totalValue",
            "required": true,
            "schema": {
              "type": "number",
              "example": 0.0001,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Information about specific collection or token\n(not all fields are available for every token, e.g. some multitokens do not have name and symbol).\n",
                  "items": {
                    "type": "object",
                    "required": [
                      "chain",
                      "address",
                      "txHash",
                      "index",
                      "value",
                      "valueAsString"
                    ],
                    "properties": {
                      "chain": {
                        "description": "The blockchain to work with.",
                        "type": "string",
                        "example": "bitcoin",
                        "enum": [
                          "bitcoin",
                          "bitcoin-mainnet",
                          "bitcoin-testnet",
                          "litecoin",
                          "litecoin-mainnet",
                          "litecoin-testnet",
                          "doge",
                          "doge-mainnet",
                          "doge-testnet",
                          "cardano",
                          "cardano-mainnet",
                          "cardano-preprod"
                        ]
                      },
                      "address": {
                        "type": "string",
                        "description": "Address of the UTXO",
                        "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
                      },
                      "txHash": {
                        "type": "string",
                        "description": "Hash of the transaction this UTXO is present in",
                        "example": "0x1b5b3e8a671434bf5d0d38e3e52dcafac484441a48bfae4a3f71e5b0b3093d8e"
                      },
                      "index": {
                        "type": "number",
                        "description": "Index of the UTXO in the transaction",
                        "example": 0
                      },
                      "value": {
                        "type": "number",
                        "description": "Value of the UTXO, in BTC, LTC or DOGE.",
                        "example": 0.0001
                      },
                      "valueAsString": {
                        "type": "string",
                        "description": "String representation of the value of the UTXO, in BTC, LTC or DOGE.",
                        "example": "0.0001"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get unspent UTXOs for an address",
        "tags": [
          "Wallet API"
        ]
      }
    },
    "/v4/data/utxos/batch": {
      "post": {
        "description": "<p><b>100 credits per address for each API call.</b></p>\n<p>Retrieve unspent UTXOs for each provided address, up to a specified total amount.\nIf you want to prepare a transaction on UTXO-based chains like Bitcoin, you need to enter unspent UTXOs to be able to perform a transaction. By providing ```totalValue``` as a total, our API will return a list of UTXOs that will be enough to cover the transaction.</p>\nOur API lets you get the unpenst UTXOs for a specific address on:</p>\n<ul>\n<li>Bitcoin - bitcoin / bitcoin-testnet</li>\n<li>Litecoin - litecoin / litecoin-testnet</li>\n<li>Dogecoin - doge / doge-testnet</li>\n<li>Cardano - cardano / cardano-preprod</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain and addresses you want to list unspent UTXOs for. If available, our API will return information about the unspent UTXOs for each address. API traverses latest 200k incoming transactions.</li>\n</ul>\n",
        "operationId": "GetUtxosByAddressBatchV4",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "addresses",
                  "totalValue"
                ],
                "properties": {
                  "chain": {
                    "description": "The blockchain to work with.",
                    "type": "string",
                    "example": "bitcoin",
                    "enum": [
                      "bitcoin",
                      "bitcoin-mainnet",
                      "bitcoin-testnet",
                      "litecoin",
                      "litecoin-mainnet",
                      "litecoin-testnet",
                      "doge",
                      "doge-mainnet",
                      "doge-testnet",
                      "cardano",
                      "cardano-mainnet",
                      "cardano-preprod"
                    ]
                  },
                  "addresses": {
                    "description": "Addresses",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 50,
                    "minItems": 1
                  },
                  "totalValue": {
                    "description": "The total amount of transaction you want to send. Only UTXOs up to this amount will be returned, so you will not spend more than you need.",
                    "type": "number",
                    "example": 0.0001,
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Information about specific collection or token\n(not all fields are available for every token, e.g. some multitokens do not have name and symbol).\n",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string",
                        "description": "The blockchain address.",
                        "example": "bc1qdj8dxppx6gyukpemsqx06a39877rt8kcc08uqs"
                      },
                      "utxos": {
                        "type": "array",
                        "description": "UTXOs up to amount for address.",
                        "items": {
                          "type": "object",
                          "required": [
                            "chain",
                            "address",
                            "txHash",
                            "index",
                            "value",
                            "valueAsString"
                          ],
                          "properties": {
                            "chain": {
                              "description": "The blockchain to work with.",
                              "type": "string",
                              "example": "bitcoin",
                              "enum": [
                                "bitcoin",
                                "bitcoin-mainnet",
                                "bitcoin-testnet",
                                "litecoin",
                                "litecoin-mainnet",
                                "litecoin-testnet",
                                "doge",
                                "doge-mainnet",
                                "doge-testnet",
                                "cardano",
                                "cardano-mainnet",
                                "cardano-preprod"
                              ]
                            },
                            "address": {
                              "type": "string",
                              "description": "Address of the UTXO",
                              "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
                            },
                            "txHash": {
                              "type": "string",
                              "description": "Hash of the transaction this UTXO is present in",
                              "example": "0x1b5b3e8a671434bf5d0d38e3e52dcafac484441a48bfae4a3f71e5b0b3093d8e"
                            },
                            "index": {
                              "type": "number",
                              "description": "Index of the UTXO in the transaction",
                              "example": 0
                            },
                            "value": {
                              "type": "number",
                              "description": "Value of the UTXO, in BTC, LTC or DOGE.",
                              "example": 0.0001
                            },
                            "valueAsString": {
                              "type": "string",
                              "description": "String representation of the value of the UTXO, in BTC, LTC or DOGE.",
                              "example": "0.0001"
                            }
                          }
                        }
                      },
                      "transactionPossible": {
                        "type": "boolean",
                        "description": "Indicate whether the total value of UTXOs is sufficient for the transaction.",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get unspent UTXOs for a batch of addresses",
        "tags": [
          "Wallet API"
        ]
      }
    },
    "/v3/data/utxos/batch": {
      "post": {
        "deprecated": true,
        "description": "<p><b>100 credits per address for each API call.</b></p>\n<p>Retrieve unspent UTXOs for each provided address, up to a specified total amount.\nIf you want to prepare a transaction on UTXO-based chains like Bitcoin, you need to enter unspent UTXOs to be able to perform a transaction. By providing ```totalValue``` as a total, our API will return a list of UTXOs that will be enough to cover the transaction.</p>\nOur API lets you get the unpenst UTXOs for a specific address on:</p>\n<ul>\n<li>Bitcoin - bitcoin / bitcoin-testnet</li>\n<li>Litecoin - litecoin / litecoin-testnet</li>\n<li>Dogecoin - doge / doge-testnet</li>\n<li>Cardano - cardano / cardano-preprod</li>\n</ul>\n<p>To get started:</p>\n<ul>\n<li>Provide a chain and addresses you want to list unspent UTXOs for. If available, our API will return information about the unspent UTXOs for each address. API traverses latest 200k incoming transactions.</li>\n</ul>\n",
        "operationId": "GetUtxosByAddressBatch",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "addresses",
                  "totalValue"
                ],
                "properties": {
                  "chain": {
                    "description": "The blockchain to work with.",
                    "type": "string",
                    "example": "bitcoin",
                    "enum": [
                      "bitcoin",
                      "bitcoin-mainnet",
                      "bitcoin-testnet",
                      "litecoin",
                      "litecoin-mainnet",
                      "litecoin-testnet",
                      "doge",
                      "doge-mainnet",
                      "doge-testnet",
                      "cardano",
                      "cardano-mainnet",
                      "cardano-preprod"
                    ]
                  },
                  "addresses": {
                    "description": "Addresses",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 50,
                    "minItems": 1
                  },
                  "totalValue": {
                    "description": "The total amount of transaction you want to send. Only UTXOs up to this amount will be returned, so you will not spend more than you need.",
                    "type": "number",
                    "example": 0.0001,
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Information about specific collection or token\n(not all fields are available for every token, e.g. some multitokens do not have name and symbol).\n",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string",
                        "description": "The blockchain address.",
                        "example": "bc1qdj8dxppx6gyukpemsqx06a39877rt8kcc08uqs"
                      },
                      "utxos": {
                        "type": "array",
                        "description": "UTXOs up to amount for address.",
                        "items": {
                          "type": "object",
                          "required": [
                            "chain",
                            "address",
                            "txHash",
                            "index",
                            "value",
                            "valueAsString"
                          ],
                          "properties": {
                            "chain": {
                              "description": "The blockchain to work with.",
                              "type": "string",
                              "example": "bitcoin",
                              "enum": [
                                "bitcoin",
                                "bitcoin-mainnet",
                                "bitcoin-testnet",
                                "litecoin",
                                "litecoin-mainnet",
                                "litecoin-testnet",
                                "doge",
                                "doge-mainnet",
                                "doge-testnet",
                                "cardano",
                                "cardano-mainnet",
                                "cardano-preprod"
                              ]
                            },
                            "address": {
                              "type": "string",
                              "description": "Address of the UTXO",
                              "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
                            },
                            "txHash": {
                              "type": "string",
                              "description": "Hash of the transaction this UTXO is present in",
                              "example": "0x1b5b3e8a671434bf5d0d38e3e52dcafac484441a48bfae4a3f71e5b0b3093d8e"
                            },
                            "index": {
                              "type": "number",
                              "description": "Index of the UTXO in the transaction",
                              "example": 0
                            },
                            "value": {
                              "type": "number",
                              "description": "Value of the UTXO, in BTC, LTC or DOGE.",
                              "example": 0.0001
                            },
                            "valueAsString": {
                              "type": "string",
                              "description": "String representation of the value of the UTXO, in BTC, LTC or DOGE.",
                              "example": "0.0001"
                            }
                          }
                        }
                      },
                      "transactionPossible": {
                        "type": "boolean",
                        "description": "Indicate whether the total value of UTXOs is sufficient for the transaction.",
                        "example": true
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "example": "validation.failed",
                      "description": "validation.failed",
                      "type": "string"
                    },
                    "message": {
                      "example": "Request validation failed. Please see data for additional information.",
                      "description": "Request validation failed. Please see data for additional information.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 400,
                      "description": "400",
                      "type": "number"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Request object present in the body of the HTTP request",
                            "example": {
                              "property": 12345
                            }
                          },
                          "value": {
                            "type": "number",
                            "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                            "example": 12345
                          },
                          "property": {
                            "type": "string",
                            "description": "Property name of the target object which validation is wrong",
                            "example": "property1"
                          },
                          "constraints": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                            "example": {
                              "min": "property1 must not be less than 50000"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode",
                    "data"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.not.active",
                          "description": "subscription.not.active",
                          "type": "string"
                        },
                        "message": {
                          "example": "Subscription not active anymore.",
                          "description": "Subscription not active anymore.",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errorCode": {
                          "example": "subscription.invalid",
                          "description": "subscription.invalid",
                          "type": "string"
                        },
                        "message": {
                          "example": "Unable to find valid subscription for '${apiKey}'",
                          "description": "Unable to find valid subscription for '${apiKey}'",
                          "type": "string"
                        },
                        "statusCode": {
                          "example": 401,
                          "description": "401",
                          "type": "number"
                        }
                      },
                      "required": [
                        "errorCode",
                        "message",
                        "statusCode"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Forbidden",
                      "description": "Forbidden",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 403,
                      "description": "403",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. There was an error on the server during the processing of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "description": "Internal server error",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 500,
                      "description": "500",
                      "type": "number"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Get unspent UTXOs for a batch of addresses",
        "tags": [
          "Wallet API"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "X-API-Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "description": "Your **API key** is used to identify your account & your plan, including the number of API calls per second and total monthly calls you have.\n\nEach key is for individual use only.\n\nIf you don't have a key already you can [Sign up for a Free Tatum account](https://co.tatum.io/signup) to get two keys (testnet and mainnet), allowing up to 5 API calls per second and 1,000,000 Credits.\n\nFor more details on limits and plans, [click here](https://docs.tatum.io/docs/plans-limits).\n"
      }
    },
    "responses": {
      "Error400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errorCode": {
                  "example": "validation.failed",
                  "description": "validation.failed",
                  "type": "string"
                },
                "message": {
                  "example": "Request validation failed. Please see data for additional information.",
                  "description": "Request validation failed. Please see data for additional information.",
                  "type": "string"
                },
                "statusCode": {
                  "example": 400,
                  "description": "400",
                  "type": "number"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "target"
                    ],
                    "properties": {
                      "target": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Request object present in the body of the HTTP request",
                        "example": {
                          "property": 12345
                        }
                      },
                      "value": {
                        "type": "number",
                        "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                        "example": 12345
                      },
                      "property": {
                        "type": "string",
                        "description": "Property name of the target object which validation is wrong",
                        "example": "property1"
                      },
                      "constraints": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                        "example": {
                          "min": "property1 must not be less than 50000"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "errorCode",
                "message",
                "statusCode",
                "data"
              ],
              "type": "object"
            }
          }
        }
      },
      "Error401": {
        "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "properties": {
                    "errorCode": {
                      "example": "subscription.not.active",
                      "description": "subscription.not.active",
                      "type": "string"
                    },
                    "message": {
                      "example": "Subscription not active anymore.",
                      "description": "Subscription not active anymore.",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 401,
                      "description": "401",
                      "type": "number"
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode"
                  ],
                  "type": "object"
                },
                {
                  "properties": {
                    "errorCode": {
                      "example": "subscription.invalid",
                      "description": "subscription.invalid",
                      "type": "string"
                    },
                    "message": {
                      "example": "Unable to find valid subscription for '${apiKey}'",
                      "description": "Unable to find valid subscription for '${apiKey}'",
                      "type": "string"
                    },
                    "statusCode": {
                      "example": 401,
                      "description": "401",
                      "type": "number"
                    }
                  },
                  "required": [
                    "errorCode",
                    "message",
                    "statusCode"
                  ],
                  "type": "object"
                }
              ]
            }
          }
        }
      },
      "Error403": {
        "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "example": "Forbidden",
                  "description": "Forbidden",
                  "type": "string"
                },
                "statusCode": {
                  "example": 403,
                  "description": "403",
                  "type": "number"
                }
              },
              "required": [
                "statusCode",
                "message"
              ],
              "type": "object"
            }
          }
        }
      },
      "Error500": {
        "description": "Internal server error. There was an error on the server during the processing of the request.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "message": {
                  "example": "Internal server error",
                  "description": "Internal server error",
                  "type": "string"
                },
                "statusCode": {
                  "example": 500,
                  "description": "500",
                  "type": "number"
                }
              },
              "required": [
                "statusCode",
                "message"
              ],
              "type": "object"
            }
          }
        }
      }
    },
    "schemas": {
      "BalanceItem": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "chain": {
                "type": "string",
                "description": "Name of the chain.",
                "example": "ethereum"
              },
              "type": {
                "type": "string",
                "enum": [
                  "native",
                  "fungible",
                  "nft",
                  "multitoken"
                ],
                "description": "Enum representing the type of token.",
                "example": "nft"
              },
              "address": {
                "type": "string"
              },
              "balance": {
                "type": "string"
              }
            },
            "required": [
              "chain",
              "type",
              "address",
              "balance"
            ]
          },
          {
            "type": "object",
            "properties": {
              "chain": {
                "type": "string",
                "description": "Name of the chain.",
                "example": "ethereum"
              },
              "type": {
                "type": "string",
                "enum": [
                  "native",
                  "fungible",
                  "nft",
                  "multitoken"
                ],
                "description": "Enum representing the type of token.",
                "example": "nft"
              },
              "address": {
                "type": "string"
              },
              "balance": {
                "type": "string"
              },
              "tokenAddress": {
                "type": "string"
              },
              "tokenId": {
                "type": "string"
              },
              "metadataURI": {
                "type": "string"
              },
              "lastUpdatedBlockNumber": {
                "type": "integer"
              },
              "metadata": {
                "type": "object"
              }
            },
            "required": [
              "chain",
              "type",
              "address",
              "balance",
              "tokenAddress",
              "lastUpdatedBlockNumber"
            ]
          },
          {
            "type": "object",
            "properties": {
              "chain": {
                "type": "string",
                "description": "Name of the chain.",
                "example": "ethereum"
              },
              "type": {
                "type": "string",
                "enum": [
                  "native",
                  "fungible",
                  "nft",
                  "multitoken"
                ],
                "description": "Enum representing the type of token.",
                "example": "nft"
              },
              "address": {
                "type": "string"
              },
              "balance": {
                "type": "string"
              },
              "tokenAddress": {
                "type": "string"
              },
              "lastUpdatedBlockNumber": {
                "type": "integer"
              }
            },
            "required": [
              "chain",
              "type",
              "address",
              "balance",
              "tokenAddress",
              "lastUpdatedBlockNumber"
            ]
          }
        ]
      },
      "NativeTokenBalance": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain.",
            "example": "ethereum"
          },
          "type": {
            "type": "string",
            "enum": [
              "native",
              "fungible",
              "nft",
              "multitoken"
            ],
            "description": "Enum representing the type of token.",
            "example": "nft"
          },
          "address": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          }
        },
        "required": [
          "chain",
          "type",
          "address",
          "balance"
        ]
      },
      "NftBalance": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain.",
            "example": "ethereum"
          },
          "type": {
            "type": "string",
            "enum": [
              "native",
              "fungible",
              "nft",
              "multitoken"
            ],
            "description": "Enum representing the type of token.",
            "example": "nft"
          },
          "address": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "tokenAddress": {
            "type": "string"
          },
          "tokenId": {
            "type": "string"
          },
          "metadataURI": {
            "type": "string"
          },
          "lastUpdatedBlockNumber": {
            "type": "integer"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "chain",
          "type",
          "address",
          "balance",
          "tokenAddress",
          "lastUpdatedBlockNumber"
        ]
      },
      "FungibleTokenBalance": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain.",
            "example": "ethereum"
          },
          "type": {
            "type": "string",
            "enum": [
              "native",
              "fungible",
              "nft",
              "multitoken"
            ],
            "description": "Enum representing the type of token.",
            "example": "nft"
          },
          "address": {
            "type": "string"
          },
          "balance": {
            "type": "string"
          },
          "tokenAddress": {
            "type": "string"
          },
          "lastUpdatedBlockNumber": {
            "type": "integer"
          }
        },
        "required": [
          "chain",
          "type",
          "address",
          "balance",
          "tokenAddress",
          "lastUpdatedBlockNumber"
        ]
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "native",
          "fungible",
          "nft",
          "multitoken"
        ],
        "description": "Enum representing the type of token.",
        "example": "nft"
      },
      "BlockItem": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "integer",
            "description": "The block number in the blockchain.",
            "example": 10
          },
          "blockTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp when the block was created, in milliseconds since Unix epoch.",
            "example": 1598671520000
          },
          "hash": {
            "type": "string",
            "description": "The hash of the block.",
            "example": "0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af"
          },
          "eventIngestedSize": {
            "type": "integer",
            "description": "The number of ingested events in the block.",
            "example": 0
          },
          "nftIngestedSize": {
            "type": "integer",
            "description": "The number of ingested NFTs in the block.",
            "example": 0
          },
          "txHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The array of transaction hashes included in the block.",
            "example": [
              "0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984"
            ]
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain.",
            "example": "ethereum"
          },
          "address": {
            "type": "string",
            "description": "The address associated with the event."
          },
          "blockNumber": {
            "type": "integer",
            "description": "The block number where the event was recorded."
          },
          "timestamp": {
            "type": "integer",
            "description": "The timestamp of the event in UNIX format."
          },
          "decoded": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "description": "Common properties for decoded data events.",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "The label of the event.",
                        "example": "Transfer"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the event.",
                        "example": "FungibleTransfer"
                      },
                      "subtype": {
                        "type": "string",
                        "description": "The subtype of the event.",
                        "example": "ERC20"
                      },
                      "from": {
                        "type": "string",
                        "description": "The sender address of the event.",
                        "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                      },
                      "to": {
                        "type": "string",
                        "description": "The receiver address of the event.",
                        "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "decimals": {
                        "type": "integer",
                        "description": "The number of decimal places for the transferred token.",
                        "example": 18
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the transferred token.",
                        "example": "1000"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common properties for decoded data events.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the event.",
                            "example": "Transfer"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "FungibleTransfer"
                          },
                          "subtype": {
                            "type": "string",
                            "description": "The subtype of the event.",
                            "example": "ERC20"
                          },
                          "from": {
                            "type": "string",
                            "description": "The sender address of the event.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          },
                          "to": {
                            "type": "string",
                            "description": "The receiver address of the event.",
                            "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "decimals": {
                            "type": "integer",
                            "description": "The number of decimal places for the transferred token.",
                            "example": 18
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the transferred token.",
                            "example": "1000"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "stablecoin": {
                        "type": "string",
                        "description": "The address of the stablecoin being transferred.",
                        "example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "type": "object",
                    "description": "Common properties for decoded data events.",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "The label of the event.",
                        "example": "Transfer"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the event.",
                        "example": "FungibleTransfer"
                      },
                      "subtype": {
                        "type": "string",
                        "description": "The subtype of the event.",
                        "example": "ERC20"
                      },
                      "from": {
                        "type": "string",
                        "description": "The sender address of the event.",
                        "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                      },
                      "to": {
                        "type": "string",
                        "description": "The receiver address of the event.",
                        "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tokenId": {
                        "type": "string",
                        "description": "The unique identifier of the NFT being transferred.",
                        "example": "101"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common properties for decoded data events.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the event.",
                            "example": "Transfer"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "FungibleTransfer"
                          },
                          "subtype": {
                            "type": "string",
                            "description": "The subtype of the event.",
                            "example": "ERC20"
                          },
                          "from": {
                            "type": "string",
                            "description": "The sender address of the event.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          },
                          "to": {
                            "type": "string",
                            "description": "The receiver address of the event.",
                            "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "operator": {
                            "type": "string",
                            "description": "The address of the operator initiating the transfer.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multitokenId": {
                        "type": "string",
                        "description": "The unique identifier of the single multitoken being transferred.",
                        "example": "1"
                      },
                      "multitokenValue": {
                        "type": "string",
                        "description": "The value of the single multitoken being transferred.",
                        "example": "100"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common properties for decoded data events.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the event.",
                            "example": "Transfer"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "FungibleTransfer"
                          },
                          "subtype": {
                            "type": "string",
                            "description": "The subtype of the event.",
                            "example": "ERC20"
                          },
                          "from": {
                            "type": "string",
                            "description": "The sender address of the event.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          },
                          "to": {
                            "type": "string",
                            "description": "The receiver address of the event.",
                            "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "operator": {
                            "type": "string",
                            "description": "The address of the operator initiating the transfer.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multitokenIds": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The unique identifiers of the multitokens being transferred.",
                        "example": [
                          "1",
                          "2",
                          "3"
                        ]
                      },
                      "multitokenValues": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The values of the multitokens being transferred.",
                        "example": [
                          "100",
                          "200",
                          "300"
                        ]
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common properties for decoded data events.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the event.",
                            "example": "Transfer"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "FungibleTransfer"
                          },
                          "subtype": {
                            "type": "string",
                            "description": "The subtype of the event.",
                            "example": "ERC20"
                          },
                          "from": {
                            "type": "string",
                            "description": "The sender address of the event.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          },
                          "to": {
                            "type": "string",
                            "description": "The receiver address of the event.",
                            "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "token0": {
                            "type": "string",
                            "description": "The address of the first token involved in the trade.",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token1": {
                            "type": "string",
                            "description": "The address of the second token involved in the trade.",
                            "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                          },
                          "partiallyRaw": {
                            "type": "boolean",
                            "description": "Indicates whether the trade data is partially raw or not.",
                            "example": false
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "amount0In": {
                        "type": "string",
                        "description": "The input amount of the first token in the trade.",
                        "example": "0.5"
                      },
                      "amount1In": {
                        "type": "string",
                        "description": "The input amount of the second token in the trade.",
                        "example": "0.0"
                      },
                      "amount0Out": {
                        "type": "string",
                        "description": "The output amount of the first token in the trade.",
                        "example": "0.0"
                      },
                      "amount1Out": {
                        "type": "string",
                        "description": "The output amount of the second token in the trade.",
                        "example": "1.0"
                      }
                    }
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common properties for decoded data events.",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "The label of the event.",
                            "example": "Transfer"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the event.",
                            "example": "FungibleTransfer"
                          },
                          "subtype": {
                            "type": "string",
                            "description": "The subtype of the event.",
                            "example": "ERC20"
                          },
                          "from": {
                            "type": "string",
                            "description": "The sender address of the event.",
                            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                          },
                          "to": {
                            "type": "string",
                            "description": "The receiver address of the event.",
                            "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "token0": {
                            "type": "string",
                            "description": "The address of the first token involved in the trade.",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token1": {
                            "type": "string",
                            "description": "The address of the second token involved in the trade.",
                            "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                          },
                          "partiallyRaw": {
                            "type": "boolean",
                            "description": "Indicates whether the trade data is partially raw or not.",
                            "example": false
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "amount0": {
                        "type": "string",
                        "description": "The net amount of the first token involved in the trade.",
                        "example": "0.5"
                      },
                      "amount1": {
                        "type": "string",
                        "description": "The net amount of the second token involved in the trade.",
                        "example": "1.0"
                      },
                      "sqrtPriceX96": {
                        "type": "string",
                        "description": "The square root price of the trading pair scaled by 2^96.",
                        "example": "79228162514264337593543950336"
                      },
                      "liquidity": {
                        "type": "string",
                        "description": "The liquidity of the trading pair at the time of the trade.",
                        "example": "1000"
                      },
                      "tick": {
                        "type": "integer",
                        "description": "The tick index of the Uniswap V3 pool at the time of the trade.",
                        "example": 1000
                      }
                    }
                  }
                ]
              }
            ],
            "description": "The decoded event data based on the given models."
          },
          "raw": {
            "type": "object",
            "description": "Raw data associated with the event, including topics and data.",
            "required": [
              "topic_0"
            ],
            "properties": {
              "topic_0": {
                "type": "string",
                "description": "The first topic of the event, if present.",
                "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
              },
              "topic_1": {
                "type": "string",
                "description": "The second topic of the event, if present.",
                "example": "0x000000000000000000000000742d35cc6634c0532925a3b844bc454e4438f44e"
              },
              "topic_2": {
                "type": "string",
                "description": "The third topic of the event, if present.",
                "example": "0x000000000000000000000000b7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
              },
              "topic_3": {
                "type": "string",
                "description": "The fourth topic of the event, if present.",
                "example": ""
              },
              "data": {
                "type": "string",
                "description": "The data associated with the event, if present.",
                "example": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000"
              }
            }
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash related to the event."
          },
          "txIndex": {
            "type": "integer",
            "description": "The transaction index within the block."
          },
          "logIndex": {
            "type": "integer",
            "description": "The log index within the transaction."
          }
        }
      },
      "DecodedDataCommon": {
        "type": "object",
        "description": "Common properties for decoded data events.",
        "properties": {
          "label": {
            "type": "string",
            "description": "The label of the event.",
            "example": "Transfer"
          },
          "type": {
            "type": "string",
            "description": "The type of the event.",
            "example": "FungibleTransfer"
          },
          "subtype": {
            "type": "string",
            "description": "The subtype of the event.",
            "example": "ERC20"
          },
          "from": {
            "type": "string",
            "description": "The sender address of the event.",
            "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
          },
          "to": {
            "type": "string",
            "description": "The receiver address of the event.",
            "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
          }
        }
      },
      "FungibleTransfer": {
        "allOf": [
          {
            "type": "object",
            "description": "Common properties for decoded data events.",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the event.",
                "example": "Transfer"
              },
              "type": {
                "type": "string",
                "description": "The type of the event.",
                "example": "FungibleTransfer"
              },
              "subtype": {
                "type": "string",
                "description": "The subtype of the event.",
                "example": "ERC20"
              },
              "from": {
                "type": "string",
                "description": "The sender address of the event.",
                "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
              },
              "to": {
                "type": "string",
                "description": "The receiver address of the event.",
                "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "decimals": {
                "type": "integer",
                "description": "The number of decimal places for the transferred token.",
                "example": 18
              },
              "value": {
                "type": "string",
                "description": "The value of the transferred token.",
                "example": "1000"
              }
            }
          }
        ]
      },
      "StablecoinTransfer": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Common properties for decoded data events.",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the event.",
                    "example": "Transfer"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the event.",
                    "example": "FungibleTransfer"
                  },
                  "subtype": {
                    "type": "string",
                    "description": "The subtype of the event.",
                    "example": "ERC20"
                  },
                  "from": {
                    "type": "string",
                    "description": "The sender address of the event.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  },
                  "to": {
                    "type": "string",
                    "description": "The receiver address of the event.",
                    "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "decimals": {
                    "type": "integer",
                    "description": "The number of decimal places for the transferred token.",
                    "example": 18
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the transferred token.",
                    "example": "1000"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "stablecoin": {
                "type": "string",
                "description": "The address of the stablecoin being transferred.",
                "example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
              }
            }
          }
        ]
      },
      "NftTransfer": {
        "allOf": [
          {
            "type": "object",
            "description": "Common properties for decoded data events.",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the event.",
                "example": "Transfer"
              },
              "type": {
                "type": "string",
                "description": "The type of the event.",
                "example": "FungibleTransfer"
              },
              "subtype": {
                "type": "string",
                "description": "The subtype of the event.",
                "example": "ERC20"
              },
              "from": {
                "type": "string",
                "description": "The sender address of the event.",
                "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
              },
              "to": {
                "type": "string",
                "description": "The receiver address of the event.",
                "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "tokenId": {
                "type": "string",
                "description": "The unique identifier of the NFT being transferred.",
                "example": "101"
              }
            }
          }
        ]
      },
      "MultitokenTransfer": {
        "allOf": [
          {
            "type": "object",
            "description": "Common properties for decoded data events.",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the event.",
                "example": "Transfer"
              },
              "type": {
                "type": "string",
                "description": "The type of the event.",
                "example": "FungibleTransfer"
              },
              "subtype": {
                "type": "string",
                "description": "The subtype of the event.",
                "example": "ERC20"
              },
              "from": {
                "type": "string",
                "description": "The sender address of the event.",
                "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
              },
              "to": {
                "type": "string",
                "description": "The receiver address of the event.",
                "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "operator": {
                "type": "string",
                "description": "The address of the operator initiating the transfer.",
                "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
              }
            }
          }
        ]
      },
      "MultitokenTransferSingle": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Common properties for decoded data events.",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the event.",
                    "example": "Transfer"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the event.",
                    "example": "FungibleTransfer"
                  },
                  "subtype": {
                    "type": "string",
                    "description": "The subtype of the event.",
                    "example": "ERC20"
                  },
                  "from": {
                    "type": "string",
                    "description": "The sender address of the event.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  },
                  "to": {
                    "type": "string",
                    "description": "The receiver address of the event.",
                    "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "operator": {
                    "type": "string",
                    "description": "The address of the operator initiating the transfer.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "multitokenId": {
                "type": "string",
                "description": "The unique identifier of the single multitoken being transferred.",
                "example": "1"
              },
              "multitokenValue": {
                "type": "string",
                "description": "The value of the single multitoken being transferred.",
                "example": "100"
              }
            }
          }
        ]
      },
      "MultitokenTransferBatch": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Common properties for decoded data events.",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the event.",
                    "example": "Transfer"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the event.",
                    "example": "FungibleTransfer"
                  },
                  "subtype": {
                    "type": "string",
                    "description": "The subtype of the event.",
                    "example": "ERC20"
                  },
                  "from": {
                    "type": "string",
                    "description": "The sender address of the event.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  },
                  "to": {
                    "type": "string",
                    "description": "The receiver address of the event.",
                    "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "operator": {
                    "type": "string",
                    "description": "The address of the operator initiating the transfer.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "multitokenIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The unique identifiers of the multitokens being transferred.",
                "example": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "multitokenValues": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the multitokens being transferred.",
                "example": [
                  "100",
                  "200",
                  "300"
                ]
              }
            }
          }
        ]
      },
      "UniswapTrade": {
        "allOf": [
          {
            "type": "object",
            "description": "Common properties for decoded data events.",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the event.",
                "example": "Transfer"
              },
              "type": {
                "type": "string",
                "description": "The type of the event.",
                "example": "FungibleTransfer"
              },
              "subtype": {
                "type": "string",
                "description": "The subtype of the event.",
                "example": "ERC20"
              },
              "from": {
                "type": "string",
                "description": "The sender address of the event.",
                "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
              },
              "to": {
                "type": "string",
                "description": "The receiver address of the event.",
                "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "token0": {
                "type": "string",
                "description": "The address of the first token involved in the trade.",
                "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
              },
              "token1": {
                "type": "string",
                "description": "The address of the second token involved in the trade.",
                "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
              },
              "partiallyRaw": {
                "type": "boolean",
                "description": "Indicates whether the trade data is partially raw or not.",
                "example": false
              }
            }
          }
        ]
      },
      "UniswapTradeV2": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Common properties for decoded data events.",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the event.",
                    "example": "Transfer"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the event.",
                    "example": "FungibleTransfer"
                  },
                  "subtype": {
                    "type": "string",
                    "description": "The subtype of the event.",
                    "example": "ERC20"
                  },
                  "from": {
                    "type": "string",
                    "description": "The sender address of the event.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  },
                  "to": {
                    "type": "string",
                    "description": "The receiver address of the event.",
                    "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "token0": {
                    "type": "string",
                    "description": "The address of the first token involved in the trade.",
                    "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                  },
                  "token1": {
                    "type": "string",
                    "description": "The address of the second token involved in the trade.",
                    "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                  },
                  "partiallyRaw": {
                    "type": "boolean",
                    "description": "Indicates whether the trade data is partially raw or not.",
                    "example": false
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "amount0In": {
                "type": "string",
                "description": "The input amount of the first token in the trade.",
                "example": "0.5"
              },
              "amount1In": {
                "type": "string",
                "description": "The input amount of the second token in the trade.",
                "example": "0.0"
              },
              "amount0Out": {
                "type": "string",
                "description": "The output amount of the first token in the trade.",
                "example": "0.0"
              },
              "amount1Out": {
                "type": "string",
                "description": "The output amount of the second token in the trade.",
                "example": "1.0"
              }
            }
          }
        ]
      },
      "UniswapTradeV3": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Common properties for decoded data events.",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the event.",
                    "example": "Transfer"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the event.",
                    "example": "FungibleTransfer"
                  },
                  "subtype": {
                    "type": "string",
                    "description": "The subtype of the event.",
                    "example": "ERC20"
                  },
                  "from": {
                    "type": "string",
                    "description": "The sender address of the event.",
                    "example": "0x742d35cc6634c0532925a3b844bc454e4438f44e"
                  },
                  "to": {
                    "type": "string",
                    "description": "The receiver address of the event.",
                    "example": "0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "token0": {
                    "type": "string",
                    "description": "The address of the first token involved in the trade.",
                    "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                  },
                  "token1": {
                    "type": "string",
                    "description": "The address of the second token involved in the trade.",
                    "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
                  },
                  "partiallyRaw": {
                    "type": "boolean",
                    "description": "Indicates whether the trade data is partially raw or not.",
                    "example": false
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "amount0": {
                "type": "string",
                "description": "The net amount of the first token involved in the trade.",
                "example": "0.5"
              },
              "amount1": {
                "type": "string",
                "description": "The net amount of the second token involved in the trade.",
                "example": "1.0"
              },
              "sqrtPriceX96": {
                "type": "string",
                "description": "The square root price of the trading pair scaled by 2^96.",
                "example": "79228162514264337593543950336"
              },
              "liquidity": {
                "type": "string",
                "description": "The liquidity of the trading pair at the time of the trade.",
                "example": "1000"
              },
              "tick": {
                "type": "integer",
                "description": "The tick index of the Uniswap V3 pool at the time of the trade.",
                "example": 1000
              }
            }
          }
        ]
      },
      "RawData": {
        "type": "object",
        "description": "Raw data associated with the event, including topics and data.",
        "required": [
          "topic_0"
        ],
        "properties": {
          "topic_0": {
            "type": "string",
            "description": "The first topic of the event, if present.",
            "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
          },
          "topic_1": {
            "type": "string",
            "description": "The second topic of the event, if present.",
            "example": "0x000000000000000000000000742d35cc6634c0532925a3b844bc454e4438f44e"
          },
          "topic_2": {
            "type": "string",
            "description": "The third topic of the event, if present.",
            "example": "0x000000000000000000000000b7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a"
          },
          "topic_3": {
            "type": "string",
            "description": "The fourth topic of the event, if present.",
            "example": ""
          },
          "data": {
            "type": "string",
            "description": "The data associated with the event, if present.",
            "example": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000"
          }
        }
      },
      "TxData": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "example": "ethereum",
            "enum": [
              "ethereum",
              "ethereum-sepolia",
              "ethereum-holesky",
              "celo",
              "celo-testnet",
              "bsc",
              "bsc-testnet",
              "polygon",
              "eon",
              "chiliz"
            ]
          },
          "hash": {
            "type": "string",
            "description": "The transaction hash.",
            "example": "0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3"
          },
          "address": {
            "type": "string",
            "description": "The address involved in the transaction.",
            "example": "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
          },
          "counterAddress": {
            "type": "string",
            "description": "The counter address involved in the transaction (optional).",
            "example": "0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852"
          },
          "tokenAddress": {
            "type": "string",
            "description": "The token address involved in the transaction (optional).",
            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the token involved in the transaction (optional).",
            "example": 33
          },
          "blockNumber": {
            "type": "number",
            "description": "The block number in which the transaction occurred.",
            "example": 16819465
          },
          "transactionIndex": {
            "type": "number",
            "description": "The transaction index within the block.",
            "example": 84
          },
          "transactionType": {
            "type": "string",
            "description": "The type of the transaction.",
            "enum": [
              "fungible",
              "nft",
              "multitoken",
              "native"
            ]
          },
          "transactionSubtype": {
            "type": "string",
            "description": "The subtype of the transaction.",
            "enum": [
              "incoming",
              "outgoing",
              "zero-transfer"
            ]
          },
          "amount": {
            "type": "string",
            "description": "The amount transferred in the transaction.",
            "example": 0.9909237063720822
          },
          "timestamp": {
            "type": "number",
            "description": "The timestamp when the transaction occurred.",
            "example": 1678715303000
          }
        }
      },
      "TxType": {
        "type": "string",
        "description": "The type of the transaction.",
        "enum": [
          "fungible",
          "nft",
          "multitoken",
          "native"
        ]
      },
      "TxSubtype": {
        "type": "string",
        "description": "The subtype of the transaction.",
        "enum": [
          "incoming",
          "outgoing",
          "zero-transfer"
        ]
      },
      "FungibleInfo": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the fungible token.",
            "example": "USDC"
          },
          "name": {
            "type": "string",
            "description": "The full name of the fungible token.",
            "example": "USD Coin"
          },
          "supply": {
            "type": "string",
            "description": "The total supply of the fungible token.",
            "example": "1000000000"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimal places for the fungible token.",
            "example": 6
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token (e.g., ERC20, BEP20).",
            "example": "ERC20"
          },
          "cap": {
            "type": "string",
            "description": "The maximum supply cap of the fungible token.",
            "example": "2000000000"
          }
        }
      },
      "FungibleInfoTezos": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the fungible token.",
            "example": "USDC"
          },
          "name": {
            "type": "string",
            "description": "The full name of the fungible token.",
            "example": "USD Coin"
          },
          "description": {
            "type": "string",
            "description": "The describtion of the fungible token.",
            "example": "USD Coin"
          },
          "supply": {
            "type": "string",
            "description": "The total supply of the fungible token.",
            "example": "1000000000"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimal places for the fungible token.",
            "example": 6
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token (e.g., fungible, nft).",
            "example": "fungible"
          }
        }
      },
      "NftInfo": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the NFT collection.",
            "example": "ART"
          },
          "name": {
            "type": "string",
            "description": "The full name of the NFT collection.",
            "example": "Art Collection"
          },
          "supply": {
            "type": "string",
            "description": "The total supply of the NFT collection.",
            "example": "5000"
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token (e.g., ERC721, ERC1155).",
            "example": "ERC721"
          }
        }
      },
      "NftInfoTezos": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The full name of the NFT collection.",
            "example": "Art Collection"
          },
          "description": {
            "type": "string",
            "description": "The total supply of the NFT collection.",
            "example": "5000"
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token (e.g., ERC721, ERC1155).",
            "example": "ERC721"
          },
          "contractMetadata": {
            "type": "object",
            "description": "Additional information about the contract"
          }
        }
      },
      "MultitokenInfo": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the multitoken collection.",
            "example": "GAME"
          },
          "name": {
            "type": "string",
            "description": "The full name of the multitoken collection.",
            "example": "Game Assets"
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token (e.g., ERC1155).",
            "example": "ERC1155"
          }
        }
      },
      "NftTokenInfo": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The symbol of the NFT token.",
            "example": "ART"
          },
          "name": {
            "type": "string",
            "description": "The name of the NFT token.",
            "example": "Mona Lisa"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata associated with the NFT token.",
            "example": {
              "artist": "Leonardo da Vinci",
              "year": 1503
            }
          },
          "metadataURI": {
            "type": "string",
            "description": "The URI of the metadata associated with the NFT token.",
            "example": "https://example.com/metadata/123"
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token (e.g., ERC721, ERC1155).",
            "example": "ERC721"
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain.",
            "example": "ethereum"
          },
          "tokenId": {
            "type": "string",
            "description": "ID of the token.",
            "maxLength": 78,
            "example": "3",
            "format": "uint256"
          },
          "tokenAddress": {
            "type": "string",
            "description": "Contract address of the token.",
            "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
          },
          "tokenType": {
            "type": "string",
            "enum": [
              "native",
              "fungible",
              "nft",
              "multitoken"
            ],
            "description": "Enum representing the type of token.",
            "example": "nft"
          },
          "metadataURI": {
            "type": "string",
            "description": "Metadata URL of the token. This data doesn't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
            "example": "ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata scheme obtained from the url. This data don't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
            "example": {
              "image": "ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX",
              "attributes": [
                {
                  "trait_type": "Background",
                  "value": "Club Exterior"
                },
                {
                  "trait_type": "Fur",
                  "value": "Radioactive"
                },
                {
                  "trait_type": "Back",
                  "value": "Beer Kegs"
                },
                {
                  "trait_type": "Mouth",
                  "value": "Goofball"
                },
                {
                  "trait_type": "Eyes",
                  "value": "Closed"
                }
              ]
            }
          }
        }
      },
      "TokenTezos": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Name of the chain.",
            "example": "ethereum"
          },
          "tokenId": {
            "type": "string",
            "description": "ID of the token.",
            "maxLength": 78,
            "example": "3",
            "format": "uint256"
          },
          "tokenAddress": {
            "type": "string",
            "description": "Contract address of the token.",
            "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
          },
          "tokenType": {
            "type": "string",
            "enum": [
              "native",
              "fungible",
              "nft",
              "multitoken"
            ],
            "description": "Enum representing the type of token.",
            "example": "nft"
          },
          "creator": {
            "type": "string",
            "description": "Address of the token creator.",
            "example": "tz1hkNPg5jQ66pJpZH2boiF5AnbAcd1dt5KS"
          },
          "name": {
            "type": "string",
            "description": "Name of the token.",
            "example": "My token 1"
          }
        }
      },
      "Chain": {
        "type": "string",
        "description": "Name of the chain.",
        "example": "ethereum"
      },
      "ChainEnum": {
        "type": "string",
        "example": "ethereum",
        "enum": [
          "ethereum",
          "ethereum-sepolia",
          "ethereum-holesky",
          "celo",
          "celo-testnet",
          "bsc",
          "bsc-testnet",
          "polygon",
          "eon",
          "chiliz"
        ]
      },
      "ChainEnumExtended": {
        "type": "string",
        "example": "ethereum",
        "enum": [
          "ethereum",
          "ethereum-sepolia",
          "celo",
          "celo-testnet",
          "bsc",
          "bsc-testnet",
          "polygon",
          "tezos",
          "eon",
          "chiliz"
        ]
      },
      "ChainUtxoEnum": {
        "description": "The blockchain to work with.",
        "type": "string",
        "example": "bitcoin",
        "enum": [
          "bitcoin",
          "bitcoin-mainnet",
          "bitcoin-testnet",
          "litecoin",
          "litecoin-mainnet",
          "litecoin-testnet",
          "doge",
          "doge-mainnet",
          "doge-testnet",
          "cardano",
          "cardano-mainnet",
          "cardano-preprod"
        ]
      },
      "Utxo": {
        "type": "object",
        "required": [
          "chain",
          "address",
          "txHash",
          "index",
          "value",
          "valueAsString"
        ],
        "properties": {
          "chain": {
            "description": "The blockchain to work with.",
            "type": "string",
            "example": "bitcoin",
            "enum": [
              "bitcoin",
              "bitcoin-mainnet",
              "bitcoin-testnet",
              "litecoin",
              "litecoin-mainnet",
              "litecoin-testnet",
              "doge",
              "doge-mainnet",
              "doge-testnet",
              "cardano",
              "cardano-mainnet",
              "cardano-preprod"
            ]
          },
          "address": {
            "type": "string",
            "description": "Address of the UTXO",
            "example": "bc1qmfp2r68cde646jv5ns7x2qvah8v5qtfw8gznj2"
          },
          "txHash": {
            "type": "string",
            "description": "Hash of the transaction this UTXO is present in",
            "example": "0x1b5b3e8a671434bf5d0d38e3e52dcafac484441a48bfae4a3f71e5b0b3093d8e"
          },
          "index": {
            "type": "number",
            "description": "Index of the UTXO in the transaction",
            "example": 0
          },
          "value": {
            "type": "number",
            "description": "Value of the UTXO, in BTC, LTC or DOGE.",
            "example": 0.0001
          },
          "valueAsString": {
            "type": "string",
            "description": "String representation of the value of the UTXO, in BTC, LTC or DOGE.",
            "example": "0.0001"
          }
        }
      },
      "TokenId": {
        "type": "string",
        "description": "ID of the token.",
        "maxLength": 78,
        "example": "3",
        "format": "uint256"
      },
      "TokenIds": {
        "type": "string",
        "description": "IDs of the token.",
        "maxLength": 78,
        "example": "3,4",
        "format": "uint256"
      },
      "TokenAddress": {
        "type": "string",
        "description": "Contract address of the token.",
        "example": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623"
      },
      "ExcludeMetadata": {
        "type": "boolean",
        "example": false
      },
      "NftMetadataURI": {
        "type": "string",
        "description": "Metadata URL of the token. This data doesn't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
        "example": "ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3"
      },
      "NftMetadata": {
        "type": "object",
        "description": "Metadata scheme obtained from the url. This data don't have to be present.\nThe safest way to obtain them in that case is from the NFT Contract.tokenURI() method call.\n",
        "example": {
          "image": "ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX",
          "attributes": [
            {
              "trait_type": "Background",
              "value": "Club Exterior"
            },
            {
              "trait_type": "Fur",
              "value": "Radioactive"
            },
            {
              "trait_type": "Back",
              "value": "Beer Kegs"
            },
            {
              "trait_type": "Mouth",
              "value": "Goofball"
            },
            {
              "trait_type": "Eyes",
              "value": "Closed"
            }
          ]
        }
      },
      "BlockNumber": {
        "type": "number",
        "example": 16499510,
        "minimum": 0
      },
      "BlockNumberTo": {
        "type": "number",
        "example": 16779230,
        "minimum": 0
      },
      "PageSize": {
        "type": "number",
        "example": 10,
        "minimum": 1,
        "maximum": 50
      },
      "Cursor": {
        "type": "string",
        "description": "Cursor pagination, used to get next page or previous page of results. The size of result is defined by the `pageSize` parameter. \nThe cursor is a base64 encoded string, user can get the value from a response in the `nextPage` or `prevPage` field. \nIf the nextPage or prevPage fields are not present in the response body, pagination is usually available with the `offset` and `pageSize` parameters. \n",
        "example": "MzYxNTQ3MHwyNDV8cHJldg=="
      },
      "Offset": {
        "type": "number",
        "example": 0
      }
    }
  }
}